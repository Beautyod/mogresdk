<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Miyagi</name>
    </assembly>
    <members>
        <member name="T:Miyagi.Core.DoubleRect">
            <summary>
            Stores four double-precision floating point numbers representing the position and size of a rectangle.
            </summary>
        </member>
        <member name="T:Miyagi.Serialization.ISerializableProperty">
            <summary>
            Enables a type to be an automatically serializable property.
            </summary>
        </member>
        <member name="M:Miyagi.Serialization.ISerializableProperty.Serialize(System.Xml.XmlTextWriter)">
            <summary>
            Writes the properties to Xml.
            </summary>
            <param name="xtw">The XmlTextWriter.</param>
        </member>
        <member name="F:Miyagi.Core.DoubleRect.Zero">
            <summary>
            Returns a DoubleRect with zero width and height.
            </summary>
        </member>
        <member name="M:Miyagi.Core.DoubleRect.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the DoubleRect struct.
            </summary>
            <param name="left">The x-coordinate of the left edge.</param>
            <param name="top">The y-coordinate of the top edge.</param>
            <param name="right">The x-coordinate of the right edge.</param>
            <param name="bottom">The y-coordinate of the bottom edge.</param>
        </member>
        <member name="M:Miyagi.Core.DoubleRect.#ctor(Miyagi.Core.Position,Miyagi.Core.Size)">
            <summary>
            Initializes a new instance of the DoubleRect struct.
            </summary>
            <param name="pos">The position of the top-left corner.</param>
            <param name="size">The size of the rectangle.</param>
        </member>
        <member name="M:Miyagi.Core.DoubleRect.op_Inequality(Miyagi.Core.DoubleRect,Miyagi.Core.DoubleRect)">
            <summary>
            Returns a value indicating whether two DoubleRect instances are not equal.
            </summary>
            <param name="left">A DoubleRect instance.</param>
            <param name="right">Another DoubleRect instance.</param>
            <returns>True if both are unequal, otherwise false.</returns>
        </member>
        <member name="M:Miyagi.Core.DoubleRect.op_Equality(Miyagi.Core.DoubleRect,Miyagi.Core.DoubleRect)">
            <summary>
            Returns a value indicating whether two DoubleRect instances are equal.
            </summary>
            <param name="left">A DoubleRect instance.</param>
            <param name="right">Another DoubleRect instance.</param>
            <returns>True if both are equal, otherwise false.</returns>
        </member>
        <member name="M:Miyagi.Core.DoubleRect.Intersect(Miyagi.Core.DoubleRect,Miyagi.Core.DoubleRect)">
            <summary>
            Intersects two DoubleRects.
            </summary>
            <param name="first">The first DoubleRect.</param>
            <param name="second">The second DoubleRect.</param>
            <returns>The intersected DoubleRect.</returns>
        </member>
        <member name="M:Miyagi.Core.DoubleRect.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified Object.
            </summary>
            <param name="obj">The other Object.</param>
            <returns>True if both are equal, otherwise false.</returns>
        </member>
        <member name="M:Miyagi.Core.DoubleRect.Equals(Miyagi.Core.DoubleRect)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified DoubleRect.
            </summary>
            <param name="other">The other DoubleRect.</param>
            <returns>True if both are equal, otherwise false.</returns>
        </member>
        <member name="M:Miyagi.Core.DoubleRect.GetHashCode">
            <summary>
            Returns the HashCode of the current instance.
            </summary>
            <returns>The HashCode of the Size.</returns>
        </member>
        <member name="M:Miyagi.Core.DoubleRect.Intersect(Miyagi.Core.DoubleRect)">
            <summary>
            Intersects the DoubleRect with another DoubleRect.
            </summary>
            <param name="other">The other DoubleRect.</param>
        </member>
        <member name="M:Miyagi.Core.DoubleRect.IsInside(Miyagi.Core.Position)">
            <summary>
            Gets a value indicating whether the specified Position is inside the DoubleRect.
            </summary>
            <param name="pos">The Position.</param>
            <returns>True if the Position is inside, otherwise false.</returns>
        </member>
        <member name="M:Miyagi.Core.DoubleRect.IsInside(System.Int32,System.Int32)">
            <summary>
            Gets a value indicating whether the specified Position is inside the DoubleRect.
            </summary>
            <param name="x">The x-coordinate.</param>
            <param name="y">The y-coordinate.</param>
            <returns>True if the Position is inside, otherwise false.</returns>
        </member>
        <member name="M:Miyagi.Core.DoubleRect.Serialize(System.Xml.XmlTextWriter)">
            <summary>
            Serializes the DoubleRect to Xml.
            </summary>
            <param name="xtw">The XmlTextWriter.</param>
        </member>
        <member name="M:Miyagi.Core.DoubleRect.ToPixels">
            <summary>
            Returns a Rect representing the DoubleRect as pixels.
            </summary>
            <returns>A Rect representing the DoubleRect as pixels.</returns>
        </member>
        <member name="M:Miyagi.Core.DoubleRect.ToString">
            <summary>
            Returns a string representation of the DoubleRect.
            </summary>
            <returns>A string representation of the DoubleRect.</returns>
        </member>
        <member name="P:Miyagi.Core.DoubleRect.Bottom">
            <summary>
            Gets the y-coordinate of the bottom edge.
            </summary>
            <value>The y-coordinate of the bottom edge.</value>
        </member>
        <member name="P:Miyagi.Core.DoubleRect.Height">
            <summary>
            Gets the height of the rectangle.
            </summary>
            <value>The height of the rectangle.</value>
        </member>
        <member name="P:Miyagi.Core.DoubleRect.Left">
            <summary>
            Gets the x-coordinate of the left edge.
            </summary>
            <value>The y-coordinate of the left edge.</value>
        </member>
        <member name="P:Miyagi.Core.DoubleRect.Position">
            <summary>
            Gets the Position of a DoubleRect.
            </summary>
            <value>The Position of a DoubleRect.</value>
        </member>
        <member name="P:Miyagi.Core.DoubleRect.Right">
            <summary>
            Gets the x-coordinate of the right edge.
            </summary>
            <value>The x-coordinate of the right edge.</value>
        </member>
        <member name="P:Miyagi.Core.DoubleRect.Size">
            <summary>
            Gets the Size of a DoubleRect.
            </summary>
            <value>The Size of a DoubleRect.</value>
        </member>
        <member name="P:Miyagi.Core.DoubleRect.Top">
            <summary>
            Gets the y-coordinate of the top edge.
            </summary>
            <value>The y-coordinate of the top edge.</value>
        </member>
        <member name="P:Miyagi.Core.DoubleRect.Width">
            <summary>
            Gets the width of the rectangle.
            </summary>
            <value>The width of the rectangle.</value>
        </member>
        <member name="T:Miyagi.Core.INamable">
            <summary>
            Indicates that a class has a name.
            </summary>
        </member>
        <member name="P:Miyagi.Core.INamable.Name">
            <summary>
            Gets the name.
            </summary>
            <value>A string representing the name.</value>
        </member>
        <member name="T:Miyagi.Core.BorderSize">
            <summary>
            Stores four integers representing the size of a border.
            </summary>
        </member>
        <member name="F:Miyagi.Core.BorderSize.Zero">
            <summary>
            Returns a BorderSize with zero width.
            </summary>
        </member>
        <member name="M:Miyagi.Core.BorderSize.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the BorderSize struct.
            </summary>
            <param name="left">The size of the left border.</param>
            <param name="right">The size of the right border.</param>
            <param name="top">The size of the top border.</param>
            <param name="bottom">The size of the bottom border.</param>
        </member>
        <member name="M:Miyagi.Core.BorderSize.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the BorderSize struct.
            </summary>
            <param name="left">The size of the left border.</param>
            <param name="right">The size of the right border.</param>
            <param name="top">The size of the top border.</param>
            <param name="bottom">The size of the bottom border.</param>
        </member>
        <member name="M:Miyagi.Core.BorderSize.op_Inequality(Miyagi.Core.BorderSize,Miyagi.Core.BorderSize)">
            <summary>
            Returns a value indicating whether two BorderSize instances are not equal.
            </summary>
            <param name="left">A BorderSize instance.</param>
            <param name="right">Another BorderSize instance.</param>
            <returns>True if both are unequal, otherwise false.</returns>
        </member>
        <member name="M:Miyagi.Core.BorderSize.op_Addition(Miyagi.Core.BorderSize,Miyagi.Core.BorderSize)">
            <summary>
            Adds the specified BorderSize.
            </summary>
            <param name="left">A BorderSize instance.</param>
            <param name="right">Another BorderSize instance.</param>
            <returns>Left + Right.</returns>
        </member>
        <member name="M:Miyagi.Core.BorderSize.op_Subtraction(Miyagi.Core.BorderSize,Miyagi.Core.BorderSize)">
            <summary>
            Subtracts the specified BorderSize.
            </summary>
            <param name="left">A BorderSize instance.</param>
            <param name="right">Another BorderSize instance.</param>
            <returns>Left - Right.</returns>
        </member>
        <member name="M:Miyagi.Core.BorderSize.op_Equality(Miyagi.Core.BorderSize,Miyagi.Core.BorderSize)">
            <summary>
            Returns a value indicating whether two BorderSize instances are equal.
            </summary>
            <param name="left">A BorderSize instance.</param>
            <param name="right">Another BorderSize instance.</param>
            <returns>True if both are equal, otherwise false.</returns>
        </member>
        <member name="M:Miyagi.Core.BorderSize.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified Object.
            </summary>
            <param name="obj">The other Object.</param>
            <returns>True if both are equal, otherwise false.</returns>
        </member>
        <member name="M:Miyagi.Core.BorderSize.Equals(Miyagi.Core.BorderSize)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified BorderSize.
            </summary>
            <param name="other">The other BorderSize.</param>
            <returns>True if both are equal, otherwise false.</returns>
        </member>
        <member name="M:Miyagi.Core.BorderSize.GetHashCode">
            <summary>
            Returns the HashCode of the current instance.
            </summary>
            <returns>The HashCode of the BorderSize.</returns>
        </member>
        <member name="M:Miyagi.Core.BorderSize.Serialize(System.Xml.XmlTextWriter)">
            <summary>
            Serializes the BorderSize to Xml.
            </summary>
            <param name="xtw">The XmlTextWriter.</param>
        </member>
        <member name="P:Miyagi.Core.BorderSize.Bottom">
            <summary>
            Gets the width of the bottom border.
            </summary>
            <value>The width of the bottom border in pixels.</value>
        </member>
        <member name="P:Miyagi.Core.BorderSize.Left">
            <summary>
            Gets the width of the left border.
            </summary>
            <value>The width of the left border in pixels.</value>
        </member>
        <member name="P:Miyagi.Core.BorderSize.Right">
            <summary>
            Gets the width of the right border.
            </summary>
            <value>The width of the right border in pixels.</value>
        </member>
        <member name="P:Miyagi.Core.BorderSize.Top">
            <summary>
            Gets the width of the top border.
            </summary>
            <value>The width of the top border in pixels.</value>
        </member>
        <member name="T:Miyagi.Controls.Elements.TextureElement">
            <summary>
            An element for displaying a texture.
            </summary>
        </member>
        <member name="T:Miyagi.Controls.Elements.BaseElement">
            <summary>
            The base class for elements.
            </summary>
        </member>
        <member name="M:Miyagi.Controls.Elements.BaseElement.#ctor">
            <summary>
            Initializes a new instance of the BaseElement class.
            </summary>
        </member>
        <member name="M:Miyagi.Controls.Elements.BaseElement.Dispose">
            <summary>
            Releases the unmanaged resources used by the element.
            </summary>
        </member>
        <member name="M:Miyagi.Controls.Elements.BaseElement.ApplyOpacity">
            <summary>
            Applies the opacity.
            </summary>
        </member>
        <member name="M:Miyagi.Controls.Elements.BaseElement.ApplyTextureFiltering">
            <summary>
            Applies the TextureFiltering.
            </summary>
        </member>
        <member name="M:Miyagi.Controls.Elements.BaseElement.ApplyVisibility">
            <summary>
            Applies the visibility.
            </summary>
        </member>
        <member name="M:Miyagi.Controls.Elements.BaseElement.ApplyZOrder">
            <summary>
            Applies the ZOrder.
            </summary>
        </member>
        <member name="M:Miyagi.Controls.Elements.BaseElement.GetZOrder">
            <summary>
            Gets the ZOrder.
            </summary>
            <returns>An int representing the zorder.</returns>
        </member>
        <member name="M:Miyagi.Controls.Elements.BaseElement.HitTest(System.Int32,System.Int32)">
            <summary>
            Performs a hit test.
            </summary>
            <param name="x">The x-coordinate.</param>
            <param name="y">The y-coordinate.</param>
            <returns>True if the Sprite is hit, otherwise false.</returns>
        </member>
        <member name="M:Miyagi.Controls.Elements.BaseElement.Move(Mogre.Vector3)">
            <summary>
            Moves the sprites of the element.
            </summary>
            <param name="diff">The distance to move.</param>
        </member>
        <member name="M:Miyagi.Controls.Elements.BaseElement.RemoveSprites">
            <summary>
            Removes the sprites.
            </summary>
        </member>
        <member name="M:Miyagi.Controls.Elements.BaseElement.Resize(Mogre.Vector3)">
            <summary>
            Resizes the sprites of the element.
            </summary>
            <param name="diff">The distance to resize.</param>
        </member>
        <member name="M:Miyagi.Controls.Elements.BaseElement.Update">
            <summary>
            Updates the element.
            </summary>
        </member>
        <member name="M:Miyagi.Controls.Elements.BaseElement.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the element.
            </summary>
            <param name="disposing">Whether Dispose has been called.</param>
        </member>
        <member name="M:Miyagi.Controls.Elements.BaseElement.GetOwner">
            <summary>
            Gets the owner.
            </summary>
            <returns>An IElementOwner representing the owner of the element.</returns>
        </member>
        <member name="M:Miyagi.Controls.Elements.BaseElement.GetOwningControl">
            <summary>
            Gets the owning control.
            </summary>
            <returns>A BaseControl representing the owner of the element or null, if the element is not own by a control.</returns>
            <remarks>While <see cref="M:Miyagi.Controls.Elements.BaseElement.GetOwner"/> returns the direct owner of the element, this iterates through the owners till it reaches a control.</remarks>
        </member>
        <member name="P:Miyagi.Controls.Elements.BaseElement.SpriteBucket">
            <summary>
            Gets a list of sprites.
            </summary>
            <value>A list of sprites.</value>
        </member>
        <member name="P:Miyagi.Controls.Elements.BaseElement.Sprites">
            <summary>
            Gets or sets the Sprite of the element.
            </summary>
            <value>The Sprite of the element.</value>
        </member>
        <member name="P:Miyagi.Controls.Elements.BaseElement.UpdateType">
            <summary>
            Gets or sets the UpdateType.
            </summary>
            <value>An UpdateType representing what should be changed when the element is updated.</value>
        </member>
        <member name="M:Miyagi.Controls.Elements.TextureElement.#ctor">
            <summary>
            Initializes a new instance of the TextureElement class.
            </summary>
        </member>
        <member name="M:Miyagi.Controls.Elements.TextureElement.Serialize(System.Xml.XmlTextWriter)">
            <summary>
            Serializes the TextureElement to Xml.
            </summary>
            <param name="xtw">The XmlTextWriter.</param>
        </member>
        <member name="M:Miyagi.Controls.Elements.TextureElement.SetPositionAndSize(Miyagi.Core.Position,Miyagi.Core.Size)">
            <summary>
            Sets the position and size of the TextureElement.
            </summary>
            <param name="position">The new position.</param>
            <param name="size">The new size.</param>
        </member>
        <member name="M:Miyagi.Controls.Elements.TextureElement.GetZOrder">
            <summary>
            Gets the ZOrder.
            </summary>
            <returns>An int representing the zorder.</returns>
        </member>
        <member name="M:Miyagi.Controls.Elements.TextureElement.Resize(Mogre.Vector3)">
            <summary>
            Resizes the sprites of the element.
            </summary>
            <param name="diff">The distance to resize.</param>
        </member>
        <member name="M:Miyagi.Controls.Elements.TextureElement.Update">
            <summary>
            Updates the element.
            </summary>
        </member>
        <member name="M:Miyagi.Controls.Elements.TextureElement.GetOwner">
            <summary>
            Gets the owner.
            </summary>
            <returns>An IElementOwner representing the owner of the element.</returns>
        </member>
        <member name="P:Miyagi.Controls.Elements.TextureElement.FileName">
            <summary>
            Gets or sets the filename of the texture.
            </summary>
            <value>A string representing the filename of the texture.</value>
        </member>
        <member name="T:Miyagi.Core.Couple`1">
            <summary>
            Stores two values of the same type.
            </summary>
            <typeparam name = "T">The type of the items.</typeparam>
        </member>
        <member name="M:Miyagi.Core.Couple`1.#ctor(`0,`0)">
            <summary>
            Initializes a new instance of the Couple struct.
            </summary>
            <param name="first">The first value.</param>
            <param name="second">The second value.</param>
        </member>
        <member name="M:Miyagi.Core.Couple`1.op_Inequality(Miyagi.Core.Couple{`0},Miyagi.Core.Couple{`0})">
            <summary>
            Returns a value indicating whether two Couple instances are not equal.
            </summary>
            <param name="left">A Couple instance.</param>
            <param name="right">Another Couple instance.</param>
            <returns>True if both are unequal, otherwise false.</returns>
        </member>
        <member name="M:Miyagi.Core.Couple`1.op_Equality(Miyagi.Core.Couple{`0},Miyagi.Core.Couple{`0})">
            <summary>
            Returns a value indicating whether two Couple instances are equal.
            </summary>
            <param name="left">A Couple instance.</param>
            <param name="right">Another Couple instance.</param>
            <returns>True if both are equal, otherwise false.</returns>
        </member>
        <member name="M:Miyagi.Core.Couple`1.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified Object.
            </summary>
            <param name="obj">The other Object.</param>
            <returns>True if both are equal, otherwise false.</returns>
        </member>
        <member name="M:Miyagi.Core.Couple`1.Equals(Miyagi.Core.Couple{`0})">
            <summary>
            Returns a value indicating whether this instance is equal to a specified Couple.
            </summary>
            <param name="other">The other Couple.</param>
            <returns>True if both are equal, otherwise false.</returns>
        </member>
        <member name="M:Miyagi.Core.Couple`1.GetHashCode">
            <summary>
            Returns the HashCode of the current instance.
            </summary>
            <returns>The HashCode of the Couple.</returns>
        </member>
        <member name="P:Miyagi.Core.Couple`1.First">
            <summary>
            Gets the first value.
            </summary>
            <value>The first value.</value>
        </member>
        <member name="P:Miyagi.Core.Couple`1.Second">
            <summary>
            Gets the second value.
            </summary>
            <value>The second value.</value>
        </member>
        <member name="T:Miyagi.Controls.Panel">
            <summary>
            A Panel control.
            </summary>
        </member>
        <member name="T:Miyagi.Controls.BaseTexturedControl">
            <summary>
            The abstract base class for controls with materials.
            </summary>
        </member>
        <member name="T:Miyagi.Controls.Label">
            <summary>
            A Label control.
            </summary>
        </member>
        <member name="T:Miyagi.Controls.BaseControl">
            <summary>
            The base class for controls.
            </summary>
        </member>
        <member name="T:Miyagi.Controls.Elements.Owner.IElementOwner">
            <summary>
            Base Interface for element owners.
            </summary>
        </member>
        <member name="P:Miyagi.Controls.Elements.Owner.IElementOwner.DerivedPosition">
            <summary>
            Gets the derived position.
            </summary>
            <value>The derived position.</value>
        </member>
        <member name="P:Miyagi.Controls.Elements.Owner.IElementOwner.Opacity">
            <summary>
            Gets the opacity.
            </summary>
            <value>The opacity, ranging between 0 and 1.</value>
        </member>
        <member name="P:Miyagi.Controls.Elements.Owner.IElementOwner.Size">
            <summary>
            Gets the width and height of the parent.
            </summary>
            <value>A Size representing the height and width of the parent in pixels.</value>
        </member>
        <member name="P:Miyagi.Controls.Elements.Owner.IElementOwner.SpriteRenderer">
            <summary>
            Gets the SpriteRenderer of the parent.
            </summary>
            <value>The SpriteRenderer of the parent.</value>
        </member>
        <member name="P:Miyagi.Controls.Elements.Owner.IElementOwner.TextureFiltering">
            <summary>
            Gets the texture filtering.
            </summary>
            <value>A TextureFiltering enum representing the texture filtering.</value>
        </member>
        <member name="P:Miyagi.Controls.Elements.Owner.IElementOwner.Visible">
            <summary>
            Gets a value indicating whether the owner is visible.
            </summary>
            <value>True if visible, otherwise false.</value>
        </member>
        <member name="P:Miyagi.Controls.Elements.Owner.IElementOwner.ZOrder">
            <summary>
            Gets the ZOrder.
            </summary>
            <value>The ZOrder.</value>
        </member>
        <member name="T:Miyagi.Serialization.ISerializable">
            <summary>
            Enables a type to be serializable.
            </summary>
        </member>
        <member name="M:Miyagi.Serialization.ISerializable.Serialize(System.Xml.XmlTextWriter)">
            <summary>
            Writes the properties to Xml.
            </summary>
            <param name="xtw">The XmlTextWriter.</param>
        </member>
        <member name="F:Miyagi.Controls.BaseControl.GuiMgr">
            <summary>
            Gets the GuiManager singleton instance.
            </summary>
        </member>
        <member name="M:Miyagi.Controls.BaseControl.#ctor(System.String,Miyagi.Core.Size,Miyagi.Core.Position)">
            <summary>
            Initializes a new instance of the BaseControl class.
            </summary>
            <param name="name">The name of the control.</param>
            <param name="size">The size of the control.</param>
            <param name="position">The position of the control.</param>
        </member>
        <member name="M:Miyagi.Controls.BaseControl.Clone(System.String)">
            <summary>
            Creates a deep copy of this control.
            </summary>
            <param name="newName">The new name of the control.</param>
            <returns>A deep copy of this control.</returns>
        </member>
        <member name="M:Miyagi.Controls.BaseControl.CreateChildControl``1(System.String,Miyagi.Core.Size,Miyagi.Core.Position)">
            <summary>
            Creates a new control and adds it the control.
            </summary>
            <param name="name">The name of the new control.</param>
            <param name="size">The size of the new control.</param>
            <param name="position">The position of the new control.</param>
            <returns>The newly created control, or null when trying to create a instance of an abstract control class.</returns>
            <typeparam name="T">The type of the control.</typeparam>
        </member>
        <member name="M:Miyagi.Controls.BaseControl.Dispose">
            <summary>
            Releases the unmanaged resources used by the control.
            </summary>
        </member>
        <member name="M:Miyagi.Controls.BaseControl.Hide(System.Boolean)">
            <summary>
            Hides the control.
            </summary>
            <param name="fade">Whether the control should fade out.</param>
        </member>
        <member name="M:Miyagi.Controls.BaseControl.Hide(System.Boolean,System.Int32)">
            <summary>
            Hides the control.
            </summary>
            <param name="fade">Whether the control should fade out.</param>
            <param name="fadeDurationMS">The fade out duration in ms.</param>
        </member>
        <member name="M:Miyagi.Controls.BaseControl.IsAncestor(Miyagi.Controls.BaseControl)">
            <summary>
            Gets a value indicating whether the specified control is a child of this control or its children.
            </summary>
            <param name="childControl">The control to find.</param>
            <returns>True if the control is a child, otherwise false.</returns>
        </member>
        <member name="M:Miyagi.Controls.BaseControl.ResetPositionAndSize">
            <summary>
            Resets the position and size of the control.
            </summary>
        </member>
        <member name="M:Miyagi.Controls.BaseControl.Serialize(System.Xml.XmlTextWriter)">
            <summary>
            Serializes the Control to Xml.
            </summary>
            <param name="xtw">The XmlTextWriter.</param>
        </member>
        <member name="M:Miyagi.Controls.BaseControl.Show(System.Boolean)">
            <summary>
            Shows the control.
            </summary>
            <param name="fade">Whether the control should fade in.</param>
        </member>
        <member name="M:Miyagi.Controls.BaseControl.Show(System.Boolean,System.Int32)">
            <summary>
            Shows the control.
            </summary>
            <param name="fade">Whether the control should fade in.</param>
            <param name="fadeDurationMS">The fade in duration in ms.</param>
        </member>
        <member name="M:Miyagi.Controls.BaseControl.ToString">
            <summary>
            Returns the name of the control.
            </summary>
            <returns>The name of the control.</returns>
        </member>
        <member name="M:Miyagi.Controls.BaseControl.HitTest(System.Int32,System.Int32)">
            <summary>
            Gets a value indicating whether the provided coordinates are inside the control.
            </summary>
            <param name="x">The x-coordinate.</param>
            <param name="y">The y-coordinate.</param>
            <returns>true if the coordinates are inside the control, otherwise false.</returns>
        </member>
        <member name="M:Miyagi.Controls.BaseControl.OnKeyPressed(Miyagi.Controls.Events.KeyEvent)">
            <summary>
            Handles key presses.
            </summary>
            <param name="arg">The KeyEvent.</param>
        </member>
        <member name="M:Miyagi.Controls.BaseControl.OnKeyReleased(Miyagi.Controls.Events.KeyEvent)">
            <summary>
            Handles key releases.
            </summary>
            <param name="arg">The KeyEvent.</param>
        </member>
        <member name="M:Miyagi.Controls.BaseControl.OnMouseClick(Miyagi.Core.MouseButton)">
            <summary>
            Handles mouse clicks.
            </summary>
            <param name="mb">The mouse button.</param>
        </member>
        <member name="M:Miyagi.Controls.BaseControl.OnMouseDoubleClick(Miyagi.Core.MouseButton)">
            <summary>
            Handles mouse double clicks.
            </summary>
            <param name="mb">The mouse button.</param>
        </member>
        <member name="M:Miyagi.Controls.BaseControl.OnMouseDrag(System.Int32,System.Int32)">
            <summary>
            Handles mouse drags.
            </summary>
            <param name="x">The x-coordinate.</param>
            <param name="y">The y-coordinate.</param>
        </member>
        <member name="M:Miyagi.Controls.BaseControl.OnMouseEnter">
            <summary>
            Handles mouse enter events.
            </summary>
        </member>
        <member name="M:Miyagi.Controls.BaseControl.OnMouseHover">
            <summary>
            Handles mouse hover events.
            </summary>
        </member>
        <member name="M:Miyagi.Controls.BaseControl.OnMouseLeave">
            <summary>
            Handles mouse leave events.
            </summary>
        </member>
        <member name="M:Miyagi.Controls.BaseControl.OnMousePressed(Miyagi.Core.MouseButton)">
            <summary>
            Handles mouse press events.
            </summary>
            <param name="mb">The mouse button.</param>
        </member>
        <member name="M:Miyagi.Controls.BaseControl.OnMouseReleased(Miyagi.Core.MouseButton)">
            <summary>
            Handles mouse release events.
            </summary>
            <param name="mb">The mouse button.</param>
        </member>
        <member name="M:Miyagi.Controls.BaseControl.OnMouseWheelMoved(System.Int32)">
            <summary>
            Handles mouse wheel events.
            </summary>
            <param name="z">The mouse wheel value.</param>
        </member>
        <member name="M:Miyagi.Controls.BaseControl.Update">
            <summary>
            Updates the control.
            </summary>
        </member>
        <member name="M:Miyagi.Controls.BaseControl.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the control.
            </summary>
            <param name="disposing">Whether Dispose has been called.</param>
        </member>
        <member name="M:Miyagi.Controls.BaseControl.GetLastSprite">
            <summary>
            Gets the Sprite rendered last of the control.
            </summary>
            <returns>The Sprite rendered last of the control.</returns>
        </member>
        <member name="M:Miyagi.Controls.BaseControl.GetLastSpriteOfLastControl">
            <summary>
            Gets the Sprite rendered last of the last rendered control.
            </summary>
            <returns>The Sprite rendered last of the control.</returns>
        </member>
        <member name="M:Miyagi.Controls.BaseControl.HitTestElements(System.Int32,System.Int32)">
            <summary>
            Performs a hit test for the elements of the control.
            </summary>
            <param name="x">The x-coordinate.</param>
            <param name="y">The y-coordinate.</param>
            <returns>True if an element is hit, otherwise false.</returns>
        </member>
        <member name="M:Miyagi.Controls.BaseControl.IsInside(System.Int32,System.Int32,Miyagi.Core.DoubleRect)">
            <summary>
            Checks if the given coordinates are in the DoubleRect.
            </summary>
            <param name="x">The x-coordinate.</param>
            <param name="y">The y-coordinate.</param>
            <param name="rec">The DoubleRect.</param>
            <returns>true if the coordinates are inside the DoubleRect, otherwise false.</returns>
            <remarks>This checks whether this control is a child of a Panel, and intersects the DoubleRect if neccessary.</remarks>
        </member>
        <member name="M:Miyagi.Controls.BaseControl.OnGotFocus">
            <summary>
            Handles getting the focus.
            </summary>
        </member>
        <member name="M:Miyagi.Controls.BaseControl.OnLostFocus">
            <summary>
            Handles losing the focus.
            </summary>
        </member>
        <member name="M:Miyagi.Controls.BaseControl.OnOpacityChanged(System.Single,System.Single)">
            <summary>
            Handles opacity changes.
            </summary>
            <param name="oldOpacity">The old opacity value.</param>
            <param name="newOpacity">The new opacity value.</param>
        </member>
        <member name="M:Miyagi.Controls.BaseControl.OnParentChanged(Miyagi.Controls.BaseControl,Miyagi.Controls.BaseControl)">
            <summary>
            Handles parent changes.
            </summary>
            <param name="oldParent">The old parent.</param>
            <param name="newParent">The new parent.</param>
        </member>
        <member name="M:Miyagi.Controls.BaseControl.OnParentSizeChanged(Miyagi.Core.Size,Miyagi.Core.Size)">
            <summary>
            Handles size changes of the parent.
            </summary>
            <param name="oldSize">The old size.</param>
            <param name="newSize">The new size.</param>
        </member>
        <member name="M:Miyagi.Controls.BaseControl.OnPositionChanged(Miyagi.Core.Position,Miyagi.Core.Position)">
            <summary>
            Handles position changes.
            </summary>
            <param name="oldPosition">The old position.</param>
            <param name="newPosition">The new position.</param>
        </member>
        <member name="M:Miyagi.Controls.BaseControl.OnSizeChanged(Miyagi.Core.Size,Miyagi.Core.Size)">
            <summary>
            Handles size changes.
            </summary>
            <param name="oldSize">The old size.</param>
            <param name="newSize">The new size.</param>
        </member>
        <member name="M:Miyagi.Controls.BaseControl.SerializeCollections(System.Xml.XmlTextWriter)">
            <summary>
            Serialize the collections of a control to Xml.
            </summary>
            <param name="xtw">The XmlTextWriter.</param>
        </member>
        <member name="E:Miyagi.Controls.BaseControl.DragDrop">
            <summary>
            Occurs when another control is dropped on this one.
            </summary>
        </member>
        <member name="E:Miyagi.Controls.BaseControl.GotFocus">
            <summary>
            Occurs when this control gets the focus.
            </summary>
        </member>
        <member name="E:Miyagi.Controls.BaseControl.KeyPressed">
            <summary>
            Occurs when a key is pressed and the control has the focus.
            </summary>
        </member>
        <member name="E:Miyagi.Controls.BaseControl.KeyReleased">
            <summary>
            Occurs when a key is released and the control has the focus.
            </summary>
        </member>
        <member name="E:Miyagi.Controls.BaseControl.LostFocus">
            <summary>
            Occurs when this control loses the focus.
            </summary>
        </member>
        <member name="E:Miyagi.Controls.BaseControl.MouseClick">
            <summary>
            Occurs when the mouse button is clicked over the control.
            </summary>
        </member>
        <member name="E:Miyagi.Controls.BaseControl.MouseDoubleClick">
            <summary>
            Occurs when the mouse button is clicked twice over the control.
            </summary>
        </member>
        <member name="E:Miyagi.Controls.BaseControl.MouseEnter">
            <summary>
            Occurs when the mouse cursor enters the control.
            </summary>
        </member>
        <member name="E:Miyagi.Controls.BaseControl.MouseHover">
            <summary>
            Occurs when the mouse cursor is moved over the control.
            </summary>
        </member>
        <member name="E:Miyagi.Controls.BaseControl.MouseLeave">
            <summary>
            Occurs when the mouse cursor leaves the control.
            </summary>
        </member>
        <member name="E:Miyagi.Controls.BaseControl.MousePressed">
            <summary>
            Occurs when a mouse button is pressed over the control.
            </summary>
        </member>
        <member name="E:Miyagi.Controls.BaseControl.MouseReleased">
            <summary>
            Occurs when a mouse button is released over the control.
            </summary>
        </member>
        <member name="E:Miyagi.Controls.BaseControl.MouseWheelMoved">
            <summary>
            Occurs when the mouse wheel is moved and the control has the focus.
            </summary>
            <remarks>Submits the relative wheel movement.</remarks>
        </member>
        <member name="E:Miyagi.Controls.BaseControl.OpacityChanged">
            <summary>
            Occurs when the <see cref="P:Miyagi.Controls.BaseControl.Opacity"/> property changes.
            </summary>
        </member>
        <member name="E:Miyagi.Controls.BaseControl.ParentChanged">
            <summary>
            Occurs when the <see cref="P:Miyagi.Controls.BaseControl.Parent"/> property changes.
            </summary>
        </member>
        <member name="E:Miyagi.Controls.BaseControl.ParentSizeChanged">
            <summary>
            Occurs when the <see cref="P:Miyagi.Controls.BaseControl.Size"/> property of the <see cref="P:Miyagi.Controls.BaseControl.Parent"/> changes.
            </summary>
        </member>
        <member name="E:Miyagi.Controls.BaseControl.PositionChanged">
            <summary>
            Occurs when the <see cref="P:Miyagi.Controls.BaseControl.Position"/> property changes.
            </summary>
        </member>
        <member name="E:Miyagi.Controls.BaseControl.SizeChanged">
            <summary>
            Occurs when the <see cref="P:Miyagi.Controls.BaseControl.Size"/> property changes.
            </summary>
        </member>
        <member name="P:Miyagi.Controls.BaseControl.Active">
            <summary>
            Gets or sets a value indicating whether the control should respond to events.
            </summary>
            <value>If set to false, the control ignores all events.</value>
        </member>
        <member name="P:Miyagi.Controls.BaseControl.Anchor">
            <summary>
            Gets or sets the edges of the parent to which the control is bound.
            </summary>
            <value>A bitwise combination of <see cref="T:Miyagi.Core.AnchorStyles"/>. The default is <b>Top</b> and <b>Left</b>.</value>
        </member>
        <member name="P:Miyagi.Controls.BaseControl.CenterOnGrab">
            <summary>
            Gets or sets a value indicating whether the control is centered on the cursor when grapped.
            </summary>
            <value>If set to true, the controls centers on the cursor. Default is false.</value>
        </member>
        <member name="P:Miyagi.Controls.BaseControl.Controls">
            <summary>
            Gets the collection of child controls.
            </summary>
            <value>The collection of child controls.</value>
        </member>
        <member name="P:Miyagi.Controls.BaseControl.DerivedPosition">
            <summary>
            Gets the derived position of a control.
            </summary>
            <value>The derived position of a control.</value>
        </member>
        <member name="P:Miyagi.Controls.BaseControl.DerivedRectangle">
            <summary>
            Gets the derived Rectangle of the control.
            </summary>
            <value>The DoubleRect that represents the derived position and size of the control in relative coordinates.</value>
        </member>
        <member name="P:Miyagi.Controls.BaseControl.EnableDefaultKeys">
            <summary>
            Gets or sets a value indicating whether the default key commands are enabled.
            </summary>
            <value>True if default key commands are enabled, otherwise false. Default is true.</value>
            <remarks>This can be used to prevent Slider and ListBox from reacting to their default keys.</remarks>
        </member>
        <member name="P:Miyagi.Controls.BaseControl.Enabled">
            <summary>
            Gets or sets a value indicating whether the control and its children should respond to events.
            </summary>
            <value>If set to false, the control and its children ignore all events.</value>
        </member>
        <member name="P:Miyagi.Controls.BaseControl.Focused">
            <summary>
            Gets or sets a value indicating whether the control has the focus.
            </summary>
            <value>If true, the control has the focus.</value>
        </member>
        <member name="P:Miyagi.Controls.BaseControl.Gui">
            <summary>
            Gets the gui of the control.
            </summary>
            <value>The gui of the control.</value>
        </member>
        <member name="P:Miyagi.Controls.BaseControl.Height">
            <summary>
            Gets or sets the height of the control.
            </summary>
            <value>The height of the control in pixels.</value>
        </member>
        <member name="P:Miyagi.Controls.BaseControl.IsMouseOver">
            <summary>
            Gets a value indicating whether the mouse is over the control.
            </summary>
            <value>True if the mouse is over the control, otherwise false.</value>
        </member>
        <member name="P:Miyagi.Controls.BaseControl.Meshes">
            <summary>
            Gets the collection of meshes assign to the control.
            </summary>
            <value>The collection of meshes assign to the control.</value>
        </member>
        <member name="P:Miyagi.Controls.BaseControl.Movable">
            <summary>
            Gets or sets a value indicating whether the control is movable.
            </summary>
            <value>If set to true, the control can be grabbed and moved by the cursor. Default is false.</value>
        </member>
        <member name="P:Miyagi.Controls.BaseControl.Name">
            <summary>
            Gets the name of the control.
            </summary>
            <value>The name of the control.</value>
        </member>
        <member name="P:Miyagi.Controls.BaseControl.Opacity">
            <summary>
            Gets or sets the opacity of the control and its children.
            </summary>
            <value>The opacity of the control. Ranging between 0 and 1.</value>
            <remarks>Setting this has no effect if the GUI or the control is not visible.</remarks>
        </member>
        <member name="P:Miyagi.Controls.BaseControl.Parent">
            <summary>
            Gets or sets the parent of the control.
            </summary>
            <value>The parent control.</value>
        </member>
        <member name="P:Miyagi.Controls.BaseControl.Position">
            <summary>
            Gets or sets the position of the control.
            </summary>
            <value>The position of the control.</value>
        </member>
        <member name="P:Miyagi.Controls.BaseControl.Rectangle">
            <summary>
            Gets or sets the Rectangle of the control.
            </summary>
            <value>The DoubleRect that represents the dimensions of the control in relative coordinates.</value>
        </member>
        <member name="P:Miyagi.Controls.BaseControl.Size">
            <summary>
            Gets or sets the width and height of the control.
            </summary>
            <value>A Size representing the height and width of the control in pixels.</value>
        </member>
        <member name="P:Miyagi.Controls.BaseControl.SpriteRenderer">
            <summary>
            Gets the SpriteRenderer of the control.
            </summary>
            <value>The SpriteRenderer of the control.</value>
        </member>
        <member name="P:Miyagi.Controls.BaseControl.TextureFiltering">
            <summary>
            Gets or sets the texture filtering of the sprite of the control.
            </summary>
            <value>A TextureFiltering enum representing the texture filtering.</value>
        </member>
        <member name="P:Miyagi.Controls.BaseControl.UserData">
            <summary>
            Gets or sets an object which contains data about the control.
            </summary>
            <value>An object which contains data about the control.</value>
            <remarks>This is ignored by the serializer.</remarks>
        </member>
        <member name="P:Miyagi.Controls.BaseControl.Visible">
            <summary>
            Gets or sets a value indicating whether the control and its children are visible.
            </summary>
            <value>If the control is visible true, otherwise false.</value>
        </member>
        <member name="P:Miyagi.Controls.BaseControl.Width">
            <summary>
            Gets or sets the width of the control.
            </summary>
            <value>The width of the control in pixels.</value>
        </member>
        <member name="P:Miyagi.Controls.BaseControl.ZOrder">
            <summary>
            Gets or sets the ZOrder of the control.
            </summary>
            <value>The ZOrder of the control.</value>
        </member>
        <member name="P:Miyagi.Controls.BaseControl.UpdateType">
            <summary>
            Gets or sets the UpdateType.
            </summary>
            <value>An UpdateType representing what should be changed when the control is updated.</value>
        </member>
        <member name="P:Miyagi.Controls.BaseControl.DeltaPosition">
            <summary>
            Gets or sets the difference of the old and new position.
            </summary>
            <value>A Vector3 representing the difference of the old and new position.</value>
        </member>
        <member name="P:Miyagi.Controls.BaseControl.DeltaSize">
            <summary>
            Gets or sets the difference of the old and new size.
            </summary>
            <value>A Vector3 representing the difference of the old and new size.</value>
        </member>
        <member name="P:Miyagi.Controls.BaseControl.ElementBucket">
            <summary>
            Gets a list of elements.
            </summary>
            <value>A list of elements.</value>
        </member>
        <member name="T:Miyagi.Controls.Elements.Owner.ITextElementOwner">
            <summary>
            Enables a class the be the parent of a TextElement.
            </summary>
        </member>
        <member name="M:Miyagi.Controls.Elements.Owner.ITextElementOwner.OnTextChanged(System.String)">
            <summary>
            Handles text changes.
            </summary>
            <param name="newText">The new text.</param>
        </member>
        <member name="M:Miyagi.Controls.Elements.Owner.ITextElementOwner.OnTextSchemeChanged(Miyagi.Core.TextScheme)">
            <summary>
            Handles TextScheme changes.
            </summary>
            <param name="textScheme">The new TextScheme.</param>
        </member>
        <member name="M:Miyagi.Controls.Label.#ctor(System.String)">
            <summary>
            Initializes a new instance of the Label class.
            </summary>
            <param name="name">The name of the Label.</param>
        </member>
        <member name="M:Miyagi.Controls.Label.#ctor(System.String,Miyagi.Core.Size)">
            <summary>
            Initializes a new instance of the Label class.
            </summary>
            <param name="name">The name of the Label.</param>
            <param name="size">The size of the Label.</param>
        </member>
        <member name="M:Miyagi.Controls.Label.#ctor(System.String,Miyagi.Core.Size,Miyagi.Core.Position)">
            <summary>
            Initializes a new instance of the Label class.
            </summary>
            <param name="name">The name of the Label.</param>
            <param name="size">The size of the Label.</param>
            <param name="position">The position of the Label.</param>
        </member>
        <member name="M:Miyagi.Controls.Label.#ctor(System.Xml.XmlNode)">
            <summary>
            Initializes a new instance of the Label class from Xml.
            </summary>
            <param name="node">The XmlNode to read from.</param>
        </member>
        <member name="M:Miyagi.Controls.Label.ResetPositionAndSize">
            <summary>
            Resets the position and size of the control.
            </summary>
        </member>
        <member name="M:Miyagi.Controls.Label.Update">
            <summary>
            Updates the control.
            </summary>
        </member>
        <member name="M:Miyagi.Controls.Label.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the control.
            </summary>
            <param name="disposing">Whether Dispose has been called.</param>
        </member>
        <member name="M:Miyagi.Controls.Label.OnSizeChanged(Miyagi.Core.Size,Miyagi.Core.Size)">
            <summary>
            Handles size changes.
            </summary>
            <param name="oldSize">The old size.</param>
            <param name="newSize">The new size.</param>
        </member>
        <member name="E:Miyagi.Controls.Label.TextChanged">
            <summary>
            Occurs when the <see cref="P:Miyagi.Controls.Elements.TextElement.Value"/> property of the TextElement of this control changes.
            </summary>
        </member>
        <member name="E:Miyagi.Controls.Label.TextSchemeChanged">
            <summary>
            Occurs when the <see cref="P:Miyagi.Controls.Elements.TextElement.TextSchemeName"/> property of the TextElement of this control changes.
            </summary>
        </member>
        <member name="P:Miyagi.Controls.Label.Text">
            <summary>
            Gets or sets the text of the Label.
            </summary>
            <value>A TextElement representing the text of the Label.</value>
        </member>
        <member name="P:Miyagi.Controls.Label.UpdateType">
            <summary>
            Gets or sets the UpdateType.
            </summary>
            <value>An UpdateType representing what should be changed when the control is updated.</value>
        </member>
        <member name="P:Miyagi.Controls.Label.ElementBucket">
            <summary>
            Gets a list of elements.
            </summary>
            <value>A list of elements.</value>
        </member>
        <member name="T:Miyagi.Controls.Elements.Owner.IBorderElementOwner">
            <summary>
            Enables a class the be the parent of a BorderElement.
            </summary>
        </member>
        <member name="P:Miyagi.Controls.Elements.Owner.IBorderElementOwner.BorderTextureName">
            <summary>
            Gets the name of the texture of the border.
            </summary>
            <value>A string representing the name of the texture of the border.</value>
        </member>
        <member name="P:Miyagi.Controls.Elements.Owner.IBorderElementOwner.Position">
            <summary>
            Gets the position of the parent.
            </summary>
            <value>The position of the parent.</value>
        </member>
        <member name="P:Miyagi.Controls.Elements.Owner.IBorderElementOwner.Quad">
            <summary>
            Gets the Quad of the parent.
            </summary>
            <value>A Quad representing the base Quad of the parent.</value>
        </member>
        <member name="T:Miyagi.Controls.Elements.Owner.ITextureElementOwner">
            <summary>
            Enables a class the be the parent of a TextureElement.
            </summary>
        </member>
        <member name="P:Miyagi.Controls.Elements.Owner.ITextureElementOwner.Border">
            <summary>
            Gets the border.
            </summary>
            <value>A BorderElement representing the border.</value>
        </member>
        <member name="M:Miyagi.Controls.BaseTexturedControl.#ctor(System.String,System.String,Miyagi.Core.Size,Miyagi.Core.Position)">
            <summary>
            Initializes a new instance of the BaseTexturedControl class.
            </summary>
            <param name="name">The name of the BaseTexturedControl.</param>
            <param name="material">The material of the BaseTexturedControl.</param>
            <param name="size">The size of the BaseTexturedControl.</param>
            <param name="position">The position of the BaseTexturedControl.</param>
        </member>
        <member name="M:Miyagi.Controls.BaseTexturedControl.ResetPositionAndSize">
            <summary>
            Resets the position and size of the control.
            </summary>
        </member>
        <member name="M:Miyagi.Controls.BaseTexturedControl.Update">
            <summary>
            Updates the control.
            </summary>
        </member>
        <member name="M:Miyagi.Controls.BaseTexturedControl.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the control.
            </summary>
            <param name="disposing">Whether Dispose has been called.</param>
        </member>
        <member name="M:Miyagi.Controls.BaseTexturedControl.OnGotFocus">
            <summary>
            Handles getting the focus.
            </summary>
        </member>
        <member name="M:Miyagi.Controls.BaseTexturedControl.OnLostFocus">
            <summary>
            Handles losing the focus.
            </summary>
        </member>
        <member name="M:Miyagi.Controls.BaseTexturedControl.OnMaterialSchemeChanged(Miyagi.Core.MaterialScheme)">
            <summary>
            Handles material changes.
            </summary>
            <param name="material">The new material.</param>
        </member>
        <member name="M:Miyagi.Controls.BaseTexturedControl.OnPositionChanged(Miyagi.Core.Position,Miyagi.Core.Position)">
            <summary>
            Handles position changes.
            </summary>
            <param name="oldPosition">The old position.</param>
            <param name="newPosition">The new position.</param>
        </member>
        <member name="M:Miyagi.Controls.BaseTexturedControl.OnSizeChanged(Miyagi.Core.Size,Miyagi.Core.Size)">
            <summary>
            Handles size changes.
            </summary>
            <param name="oldSize">The old size.</param>
            <param name="newSize">The new size.</param>
        </member>
        <member name="E:Miyagi.Controls.BaseTexturedControl.MaterialSchemeChanged">
            <summary>
            Occurs when the material of this control changes.
            </summary>
        </member>
        <member name="P:Miyagi.Controls.BaseTexturedControl.Border">
            <summary>
            Gets or sets the border.
            </summary>
            <value>A BorderElement representing the border of the control.</value>
        </member>
        <member name="P:Miyagi.Controls.BaseTexturedControl.CombinedMaterialName">
            <summary>
            Gets the combined name of the material.
            </summary>
            <value>The combined material name.</value>
        </member>
        <member name="P:Miyagi.Controls.BaseTexturedControl.MaterialScheme">
            <summary>
            Gets or sets the MaterialScheme of a control.
            </summary>
            <value>A MaterialScheme.</value>
        </member>
        <member name="P:Miyagi.Controls.BaseTexturedControl.MaterialSchemeName">
            <summary>
            Gets or sets the name of the assigned material.
            </summary>
            <value>A string representing the material name.</value>
        </member>
        <member name="P:Miyagi.Controls.BaseTexturedControl.Texture">
            <summary>
            Gets or sets the texture.
            </summary>
            <value>A TextureElement representing the texture of the control.</value>
        </member>
        <member name="P:Miyagi.Controls.BaseTexturedControl.HasBorder">
            <summary>
            Gets a value indicating whether this control has a border.
            </summary>
            <value>True if this control has a border, otherwise false.</value>
        </member>
        <member name="P:Miyagi.Controls.BaseTexturedControl.UpdateType">
            <summary>
            Gets or sets the UpdateType.
            </summary>
            <value>An UpdateType representing what should be changed when the control is updated.</value>
        </member>
        <member name="P:Miyagi.Controls.BaseTexturedControl.ElementBucket">
            <summary>
            Gets a list of elements.
            </summary>
            <value>A list of elements.</value>
        </member>
        <member name="M:Miyagi.Controls.Panel.#ctor(System.String)">
            <summary>
            Initializes a new instance of the Panel class.
            </summary>
            <param name="name">The name of the Panel.</param>
        </member>
        <member name="M:Miyagi.Controls.Panel.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the Panel class.
            </summary>
            <param name="name">The name of the Panel.</param>
            <param name="material">The material of the Panel.</param>
        </member>
        <member name="M:Miyagi.Controls.Panel.#ctor(System.String,System.String,Miyagi.Core.Size)">
            <summary>
            Initializes a new instance of the Panel class.
            </summary>
            <param name="name">The name of the Panel.</param>
            <param name="material">The material of the Panel.</param>
            <param name="size">The size of the Panel.</param>
        </member>
        <member name="M:Miyagi.Controls.Panel.#ctor(System.String,System.String,Miyagi.Core.Size,Miyagi.Core.Position)">
            <summary>
            Initializes a new instance of the Panel class.
            </summary>
            <param name="name">The name of the Panel.</param>
            <param name="material">The material of the Panel.</param>
            <param name="size">The size of the Panel.</param>
            <param name="position">The position of the Panel.</param>
        </member>
        <member name="M:Miyagi.Controls.Panel.#ctor(System.Xml.XmlNode)">
            <summary>
            Initializes a new instance of the Panel class from Xml.
            </summary>
            <param name="node">The XmlNode to read from.</param>
        </member>
        <member name="M:Miyagi.Controls.Panel.CheckMagneticDock(System.Int32,System.Int32)">
            <summary>
            Checks if the Panel should dock magnetically.
            </summary>
            <param name="xpos">The new x-coordinate.</param>
            <param name="ypos">The new y-coordinate.</param>
            <returns>The a Pair of ints representing the updated x/y coordinates.</returns>
        </member>
        <member name="M:Miyagi.Controls.Panel.OnMouseDrag(System.Int32,System.Int32)">
            <summary>
            Handles mouse drags.
            </summary>
            <param name="x">The x-coordinate.</param>
            <param name="y">The y-coordinate.</param>
        </member>
        <member name="M:Miyagi.Controls.Panel.OnMouseHover">
            <summary>
            Handles mouse hover events.
            </summary>
        </member>
        <member name="M:Miyagi.Controls.Panel.OnMouseLeave">
            <summary>
            Handles mouse leave events.
            </summary>
        </member>
        <member name="M:Miyagi.Controls.Panel.OnMousePressed(Miyagi.Core.MouseButton)">
            <summary>
            Handles mouse press events.
            </summary>
            <param name="mb">The mouse button.</param>
        </member>
        <member name="M:Miyagi.Controls.Panel.OnMouseReleased(Miyagi.Core.MouseButton)">
            <summary>
            Handles mouse release events.
            </summary>
            <param name="mb">The mouse button.</param>
        </member>
        <member name="M:Miyagi.Controls.Panel.Update">
            <summary>
            Updates the control.
            </summary>
        </member>
        <member name="P:Miyagi.Controls.Panel.MagneticDockSize">
            <summary>
            Gets or sets the distance in which this Panel docks magnetically on other Panels or the screen edges.
            </summary>
            <value>A Size value representing the distance.</value>
            <remarks>MagneticDock and <see cref="P:Miyagi.Controls.BaseControl.CenterOnGrab"/> are mutually exclusive.</remarks>
        </member>
        <member name="P:Miyagi.Controls.Panel.MaxSize">
            <summary>
            Gets or sets the maximum size of the Panel.
            </summary>
            <value>The size in pixels.</value>
        </member>
        <member name="P:Miyagi.Controls.Panel.MinSize">
            <summary>
            Gets or sets the minimum size of the Panel.
            </summary>
            <value>The size in pixels.</value>
        </member>
        <member name="P:Miyagi.Controls.Panel.ResizeAreaSize">
            <summary>
            Gets or sets the size of the area where resizing is triggered.
            </summary>
            <value>The width in pixels.</value>
        </member>
        <member name="P:Miyagi.Controls.Panel.ResizeMode">
            <summary>
            Gets or sets the ResizeMode of the Panel.
            </summary>
            <value>A bitwise combination of <see cref="T:Miyagi.Core.ResizeModes"/> representing how the panel can be resized.</value>
        </member>
        <member name="T:Miyagi.Controls.Events.KeyEvent">
            <summary>
            A KeyEvent.
            </summary>
        </member>
        <member name="M:Miyagi.Controls.Events.KeyEvent.#ctor(System.ConsoleKey,System.ConsoleModifiers)">
            <summary>
            Initializes a new instance of the KeyEvent struct.
            </summary>
            <param name="key">A ConsoleKey representing the key.</param>
            <param name="modifiers">ConsoleModifiers representing the modifiers.</param>
        </member>
        <member name="P:Miyagi.Controls.Events.KeyEvent.Key">
            <summary>
            Gets the key.
            </summary>
            <value>A ConsoleKey representing the key.</value>
        </member>
        <member name="P:Miyagi.Controls.Events.KeyEvent.Modifiers">
            <summary>
            Gets the modifier.
            </summary>
            <value>ConsoleModifiers representing the modiefers.</value>
        </member>
        <member name="T:Miyagi.Controls.CheckBox">
            <summary>
            A CheckBox control.
            </summary>
        </member>
        <member name="T:Miyagi.Controls.Button">
            <summary>
            A Button control.
            </summary>
        </member>
        <member name="M:Miyagi.Controls.Button.#ctor(System.String)">
            <summary>
            Initializes a new instance of the Button class.
            </summary>
            <param name="name">The name of the Button.</param>
        </member>
        <member name="M:Miyagi.Controls.Button.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the Button class.
            </summary>
            <param name="name">The name of the Button.</param>
            <param name="material">The material of the Button.</param>
        </member>
        <member name="M:Miyagi.Controls.Button.#ctor(System.String,System.String,Miyagi.Core.Size)">
            <summary>
            Initializes a new instance of the Button class.
            </summary>
            <param name="name">The name of the Button.</param>
            <param name="material">The material of the Button.</param>
            <param name="size">The size of the Button.</param>
        </member>
        <member name="M:Miyagi.Controls.Button.#ctor(System.String,System.String,Miyagi.Core.Size,Miyagi.Core.Position)">
            <summary>
            Initializes a new instance of the Button class.
            </summary>
            <param name="name">The name of the Button.</param>
            <param name="material">The material of the Button.</param>
            <param name="size">The size of the Button.</param>
            <param name="position">The position of the Button.</param>
        </member>
        <member name="M:Miyagi.Controls.Button.#ctor(System.Xml.XmlNode)">
            <summary>
            Initializes a new instance of the Button class from Xml.
            </summary>
            <param name="node">The XmlNode to read from.</param>
        </member>
        <member name="M:Miyagi.Controls.Button.OnMouseEnter">
            <summary>
            Handles mouse enter events.
            </summary>
        </member>
        <member name="M:Miyagi.Controls.Button.OnMouseLeave">
            <summary>
            Handles mouse leave events.
            </summary>
        </member>
        <member name="M:Miyagi.Controls.Button.OnMousePressed(Miyagi.Core.MouseButton)">
            <summary>
            Handles mouse press events.
            </summary>
            <param name="mb">The mouse button.</param>
        </member>
        <member name="M:Miyagi.Controls.Button.OnMouseReleased(Miyagi.Core.MouseButton)">
            <summary>
            Handles mouse release events.
            </summary>
            <param name="mb">The mouse button.</param>
        </member>
        <member name="M:Miyagi.Controls.Button.OnMaterialEvent(Miyagi.Core.MaterialChangingEvent)">
            <summary>
            Handles material events.
            </summary>
            <param name="action">The event.</param>
        </member>
        <member name="M:Miyagi.Controls.CheckBox.#ctor(System.String)">
            <summary>
            Initializes a new instance of the CheckBox class.
            </summary>
            <param name="name">The name of the CheckBox.</param>
        </member>
        <member name="M:Miyagi.Controls.CheckBox.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the CheckBox class.
            </summary>
            <param name="name">The name of the CheckBox.</param>
            <param name="material">The material of the CheckBox.</param>
        </member>
        <member name="M:Miyagi.Controls.CheckBox.#ctor(System.String,System.String,Miyagi.Core.Size)">
            <summary>
            Initializes a new instance of the CheckBox class.
            </summary>
            <param name="name">The name of the CheckBox.</param>
            <param name="material">The material of the CheckBox.</param>
            <param name="size">The size of the CheckBox.</param>
        </member>
        <member name="M:Miyagi.Controls.CheckBox.#ctor(System.String,System.String,Miyagi.Core.Size,Miyagi.Core.Position)">
            <summary>
            Initializes a new instance of the CheckBox class.
            </summary>
            <param name="name">The name of the CheckBox.</param>
            <param name="material">The material of the CheckBox.</param>
            <param name="size">The size of the CheckBox.</param>
            <param name="position">The position of the CheckBox.</param>
        </member>
        <member name="M:Miyagi.Controls.CheckBox.#ctor(System.Xml.XmlNode)">
            <summary>
            Initializes a new instance of the CheckBox class from Xml.
            </summary>
            <param name="node">The XmlNode to read from.</param>
        </member>
        <member name="M:Miyagi.Controls.CheckBox.OnMousePressed(Miyagi.Core.MouseButton)">
            <summary>
            Handles mouse press events.
            </summary>
            <param name="mb">The mouse button.</param>
        </member>
        <member name="M:Miyagi.Controls.CheckBox.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the control.
            </summary>
            <param name="disposing">Whether Dispose has been called.</param>
        </member>
        <member name="M:Miyagi.Controls.CheckBox.OnChecked">
            <summary>
            Is executed when Checked is set to true.
            </summary>
        </member>
        <member name="M:Miyagi.Controls.CheckBox.OnUnchecked">
            <summary>
            Is executed when Checked is set to false.
            </summary>
        </member>
        <member name="E:Miyagi.Controls.CheckBox.CheckedChanged">
            <summary>
            Occurs when the Checked property is changed.
            </summary>
        </member>
        <member name="P:Miyagi.Controls.CheckBox.Checked">
            <summary>
            Gets or sets a value indicating whether the control is checked.
            </summary>
            <value>The check state of the control.</value>
        </member>
        <member name="P:Miyagi.Controls.CheckBox.CombinedMaterialName">
            <summary>
            Gets the combined name of the material.
            </summary>
            <value>The combined material name.</value>
        </member>
        <member name="T:Miyagi.Collections.ControlCollection">
            <summary>
            A custom collection of controls.
            </summary>
        </member>
        <member name="T:Miyagi.Collections.BaseCollection`1">
            <summary>
            A custom implementation of ICollection and IList.
            </summary>
            <typeparam name = "T">The type of items in the collection.</typeparam>
        </member>
        <member name="M:Miyagi.Collections.BaseCollection`1.#ctor">
            <summary>
            Initializes a new instance of the BaseCollection class.
            </summary>
        </member>
        <member name="M:Miyagi.Collections.BaseCollection`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns the enumerator of the collection.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:Miyagi.Collections.BaseCollection`1.Add(`0)">
            <summary>
            Adds a item to the collection.
            </summary>
            <param name="item">The new item.</param>
        </member>
        <member name="M:Miyagi.Collections.BaseCollection`1.AddRange(`0[])">
            <summary>
            Adds a array of items to the collection.
            </summary>
            <param name="items">The array of items.</param>
        </member>
        <member name="M:Miyagi.Collections.BaseCollection`1.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:Miyagi.Collections.BaseCollection`1.Contains(`0)">
            <summary>
            Determines whether the collection contains an item.
            </summary>
            <param name="item">The item to find.</param>
            <returns>true if found, otherwise false.</returns>
        </member>
        <member name="M:Miyagi.Collections.BaseCollection`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the collection to an array.
            </summary>
            <param name="array">The destination array.</param>
            <param name="arrayIndex">The starting index.</param>
        </member>
        <member name="M:Miyagi.Collections.BaseCollection`1.ForEach(System.Action{`0}[])">
            <summary>
            Executes an action for each item in the collection.
            </summary>
            <param name="action">The action to perform.</param>
        </member>
        <member name="M:Miyagi.Collections.BaseCollection`1.GetEnumerator">
            <summary>
            Returns the enumerator of the collection.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:Miyagi.Collections.BaseCollection`1.IndexOf(`0)">
            <summary>
            Returns the index of the specified item.
            </summary>
            <param name="item">The object to locate in the BaseCollection.</param>
            <returns>The zero-based index of the item.</returns>
        </member>
        <member name="M:Miyagi.Collections.BaseCollection`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an item at the specified index.
            </summary>
            <param name="index">The index at which item should be inserted.</param>
            <param name="item">The item to insert.</param>
        </member>
        <member name="M:Miyagi.Collections.BaseCollection`1.Remove(`0)">
            <summary>
            Removes an item from the collection.
            </summary>
            <param name="item">The item to remove.</param>
            <returns>true if the item has been removed sucessfully, otherwise false.</returns>
        </member>
        <member name="M:Miyagi.Collections.BaseCollection`1.RemoveAt(System.Int32)">
            <summary>
            Removes an item at the specific index.
            </summary>
            <param name="index">The index of the item to remove.</param>
        </member>
        <member name="P:Miyagi.Collections.BaseCollection`1.Count">
            <summary>
            Gets the number of items in the collection.
            </summary>
            <value>The number of items in the collection.</value>
        </member>
        <member name="P:Miyagi.Collections.BaseCollection`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the collection is readonly.
            </summary>
            <value>True if readonly, otherwise false.</value>
        </member>
        <member name="P:Miyagi.Collections.BaseCollection`1.Items">
            <summary>
            Gets the list of items.
            </summary>
            <value>The list of items.</value>
        </member>
        <member name="P:Miyagi.Collections.BaseCollection`1.Item(System.String)">
            <summary>
            Gets or sets an item by name.
            </summary>
            <param name="name">The name of the item.</param>
        </member>
        <member name="P:Miyagi.Collections.BaseCollection`1.Item(System.Int32)">
            <summary>
            Gets or sets an item by index.
            </summary>
            <param name="index">The index of the item.</param>
        </member>
        <member name="M:Miyagi.Collections.ControlCollection.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the ControlCollection class.
            </summary>
            <param name="owner">The parent of the collection.</param>
        </member>
        <member name="M:Miyagi.Collections.ControlCollection.Add(Miyagi.Controls.BaseControl)">
            <summary>
            Adds a control to the collection.
            </summary>
            <param name="item">The new control.</param>
        </member>
        <member name="M:Miyagi.Collections.ControlCollection.Remove(Miyagi.Controls.BaseControl)">
            <summary>
            Removes a control from the collection.
            </summary>
            <param name="item">The control to remove.</param>
            <returns>true if the control has been removed sucessfully, otherwise false.</returns>
        </member>
        <member name="E:Miyagi.Collections.ControlCollection.ControlAdded">
            <summary>
            Occurs when a new control is added.
            </summary>
        </member>
        <member name="E:Miyagi.Collections.ControlCollection.ControlRemoved">
            <summary>
            Occurs when a control is removed.
            </summary>
        </member>
        <member name="P:Miyagi.Collections.ControlCollection.Owner">
            <summary>
            Gets the owner of the ControlCollection.
            </summary>
            <value>An object representing the owner.</value>
        </member>
        <member name="T:Miyagi.Controls.Events.SubmitEventArgs">
            <summary>
            EventArgs for submit events.
            </summary>
        </member>
        <member name="M:Miyagi.Controls.Events.SubmitEventArgs.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the SubmitEventArgs class.
            </summary>
            <param name="data">Submitted data.</param>
        </member>
        <member name="P:Miyagi.Controls.Events.SubmitEventArgs.Data">
            <summary>
            Gets the submitted data.
            </summary>
            <value>An Object representing the submitted data.</value>
        </member>
        <member name="T:Miyagi.Controls.Events.MouseEventArgs">
            <summary>
            EventArgs for mouse events.
            </summary>
        </member>
        <member name="T:Miyagi.Controls.Events.BaseEventArgs">
            <summary>
            Base EventArgs containing mouse coordinates.
            </summary>
        </member>
        <member name="M:Miyagi.Controls.Events.BaseEventArgs.#ctor">
            <summary>
            Initializes a new instance of the BaseEventArgs class.
            </summary>
        </member>
        <member name="P:Miyagi.Controls.Events.BaseEventArgs.MouseX">
            <summary>
            Gets the x-coordinate of the mouse.
            </summary>
            <value>An int representing the x-coordinate of the mouse.</value>
        </member>
        <member name="P:Miyagi.Controls.Events.BaseEventArgs.MouseY">
            <summary>
            Gets the y-coordinate of the mouse.
            </summary>
            <value>An int representing the y-coordinate of the mouse.</value>
        </member>
        <member name="M:Miyagi.Controls.Events.MouseEventArgs.#ctor(Miyagi.Core.MouseButton)">
            <summary>
            Initializes a new instance of the MouseEventArgs class.
            </summary>
            <param name="mb">The mouse button.</param>
        </member>
        <member name="P:Miyagi.Controls.Events.MouseEventArgs.MouseButton">
            <summary>
            Gets the MouseButton.
            </summary>
            <value>The MouseEvent.</value>
        </member>
        <member name="T:Miyagi.Core.MaterialScheme">
            <summary>
            A MaterialScheme represents different material states and their textures.
            </summary>
        </member>
        <member name="M:Miyagi.Core.MaterialScheme.#ctor(System.String)">
            <summary>
            Initializes a new instance of the MaterialScheme class.
            </summary>
            <param name="name">The name of the MaterialScheme.</param>
        </member>
        <member name="M:Miyagi.Core.MaterialScheme.#ctor(System.String,System.Type,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the MaterialScheme class and tries to find the textures for the materials from the specified filename.
            </summary>
            <param name="name">The name of the MaterialScheme.</param>
            <param name="controlType">The type of control which will use the material.</param>
            <param name="fileName">The texture filename of the base material.</param>
            <param name="preLoad">Indicates whether the texture files should be preloaded.</param>
        </member>
        <member name="M:Miyagi.Core.MaterialScheme.FromMaterialFile(System.String,System.Type,System.String)">
            <summary>
            Creates a new MaterialScheme from a .material file.
            </summary>
            <param name="name">The name of the MaterialScheme.</param>
            <param name="controlType">The type of control which will use the material.</param>
            <param name="fileName">The filename of the .material file.</param>
            <returns>A new MaterialScheme.</returns>
        </member>
        <member name="M:Miyagi.Core.MaterialScheme.IsMaterialDefined(System.String)">
            <summary>
            Gets a value indicating whether a material is defined.
            </summary>
            <param name="material">The name of the material.</param>
            <returns>True if the material is defined, otherwise false.</returns>
        </member>
        <member name="M:Miyagi.Core.MaterialScheme.LoadAllTextures">
            <summary>
            Loads all textures.
            </summary>
        </member>
        <member name="M:Miyagi.Core.MaterialScheme.Serialize(System.Xml.XmlTextWriter)">
            <summary>
            Serializes the MaterialScheme to Xml.
            </summary>
            <param name="xtw">The XmlTextWriter.</param>
        </member>
        <member name="M:Miyagi.Core.MaterialScheme.ToString">
            <summary>
            Returns the name of the MaterialScheme.
            </summary>
            <returns>The name of the MaterialScheme.</returns>
        </member>
        <member name="M:Miyagi.Core.MaterialScheme.UnloadAllTextures">
            <summary>
            Unloads all textures.
            </summary>
        </member>
        <member name="P:Miyagi.Core.MaterialScheme.Name">
            <summary>
            Gets or sets the name of the MaterialScheme.
            </summary>
            <value>The name of the MaterialScheme.</value>
        </member>
        <member name="P:Miyagi.Core.MaterialScheme.Textures">
            <summary>
            Gets the collection of textures.
            </summary>
            <value>The collection of textures.</value>
        </member>
        <member name="T:Miyagi.Controls.Events.EventScriptingScheme">
            <summary>
            A EventScriptingScheme.
            </summary>
        </member>
        <member name="M:Miyagi.Controls.Events.EventScriptingScheme.#ctor(System.String)">
            <summary>
            Initializes a new instance of the EventScriptingScheme class.
            </summary>
            <param name="name">The name of the EventScriptingScheme.</param>
        </member>
        <member name="M:Miyagi.Controls.Events.EventScriptingScheme.Serialize(System.Xml.XmlTextWriter)">
            <summary>
            Serializes the EventScriptingScheme to an XmlTextWriter.
            </summary>
            <param name="xtw">The XmlTextWriter.</param>
        </member>
        <member name="P:Miyagi.Controls.Events.EventScriptingScheme.EventMethodDefinitions">
            <summary>
            Gets a collection of EventMethodDefinition.
            </summary>
            <value>A collection of EventMethodDefinition.</value>
        </member>
        <member name="P:Miyagi.Controls.Events.EventScriptingScheme.FilePath">
            <summary>
            Gets or sets the path of the script file.
            </summary>
            <value>A string representing the path of the script file.</value>
        </member>
        <member name="P:Miyagi.Controls.Events.EventScriptingScheme.Name">
            <summary>
            Gets the name.
            </summary>
            <value>A string representing the name.</value>
        </member>
        <member name="P:Miyagi.Controls.Events.EventScriptingScheme.ReferencedAssemblies">
            <summary>
            Gets a list of the referenced assemblies.
            </summary>
            <value>A list of strings representing the referenced assemblies.</value>
        </member>
        <member name="T:Miyagi.Controls.Events.EventScriptingScheme.EventMethodDefinition">
            <summary>
            A EventMethodDefinition.
            </summary>
        </member>
        <member name="M:Miyagi.Controls.Events.EventScriptingScheme.EventMethodDefinition.#ctor(Miyagi.Controls.BaseControl)">
            <summary>
            Initializes a new instance of the EventMethodDefinition class.
            </summary>
            <param name="control">The control which events will be defined.</param>
        </member>
        <member name="M:Miyagi.Controls.Events.EventScriptingScheme.EventMethodDefinition.SetEventMethod(System.String,System.String)">
            <summary>
            Sets a event and its method.
            </summary>
            <param name="eventName">The name of the event.</param>
            <param name="methodName">The name of the method.</param>
        </member>
        <member name="P:Miyagi.Controls.Events.EventScriptingScheme.EventMethodDefinition.Control">
            <summary>
            Gets the control.
            </summary>
            <value>The control which events will be defined.</value>
        </member>
        <member name="P:Miyagi.Controls.Events.EventScriptingScheme.EventMethodDefinition.EventMethods">
            <summary>
            Gets a collection representing the events and methods.
            </summary>
            <value>A collection representing the events and methods.</value>
        </member>
        <member name="T:Miyagi.Rendering.Quad">
            <summary>
            A representation of a Quad.
            </summary>
        </member>
        <member name="M:Miyagi.Rendering.Quad.DeltaMove(Mogre.Vector3)">
            <summary>
            Moves the Quad.
            </summary>
            <param name="delta">The distance to move.</param>
        </member>
        <member name="M:Miyagi.Rendering.Quad.DeltaMoveBottom(Mogre.Vector3)">
            <summary>
            Moves the bottom edge of the Quad.
            </summary>
            <param name="delta">The distance to move.</param>
        </member>
        <member name="M:Miyagi.Rendering.Quad.DeltaMoveLeft(Mogre.Vector3)">
            <summary>
            Moves the left edge of the Quad.
            </summary>
            <param name="delta">The distance to move.</param>
        </member>
        <member name="M:Miyagi.Rendering.Quad.DeltaMoveRight(Mogre.Vector3)">
            <summary>
            Moves the right edge of the Quad.
            </summary>
            <param name="delta">The distance to move.</param>
        </member>
        <member name="M:Miyagi.Rendering.Quad.DeltaMoveTop(Mogre.Vector3)">
            <summary>
            Moves the top edge of the Quad.
            </summary>
            <param name="delta">The distance to move.</param>
        </member>
        <member name="M:Miyagi.Rendering.Quad.DeltaResize(Mogre.Vector3)">
            <summary>
            Resizes the Quad.
            </summary>
            <param name="delta">The distance to resize.</param>
        </member>
        <member name="M:Miyagi.Rendering.Quad.HitTest(System.Int32,System.Int32)">
            <summary>
            Performs a hit test.
            </summary>
            <param name="x">The x-coordinate.</param>
            <param name="y">The y-coordinate.</param>
            <returns>True if the Quad is hit, otherwise false.</returns>
        </member>
        <member name="M:Miyagi.Rendering.Quad.SetColour(Mogre.ColourValue,Mogre.ColourValue)">
            <summary>
            Sets the colour of the Quad.
            </summary>
            <param name="topColour">The top colour.</param>
            <param name="bottomColour">The bottom colour.</param>
        </member>
        <member name="M:Miyagi.Rendering.Quad.SetPosition(Mogre.Rect)">
            <summary>
            Sets the position of the Quad.
            </summary>
            <param name="rect">A rect representing the position of the Quad.</param>
        </member>
        <member name="M:Miyagi.Rendering.Quad.SetUv(Mogre.FloatRect)">
            <summary>
            Sets the uv-coordinates of the Quad.
            </summary>
            <param name="rect">A FloatRect representing the uv-coordinates.</param>
        </member>
        <member name="P:Miyagi.Rendering.Quad.Center">
            <summary>
            Gets the center of the Quad.
            </summary>
            <value>A Vector3 representing the center of the Quad.</value>
        </member>
        <member name="P:Miyagi.Rendering.Quad.Height">
            <summary>
            Gets the height of the Quad.
            </summary>
            <value>A float representing the height of the Quad.</value>
        </member>
        <member name="P:Miyagi.Rendering.Quad.SkipRender">
            <summary>
            Gets a value indicating whether rendering of this Quad should be skipped.
            </summary>
            <value>True if the rendering of this Quad should be skipped, otherwise false.</value>
        </member>
        <member name="P:Miyagi.Rendering.Quad.VertexCol">
            <summary>
            Gets or sets the colours of the verticies.
            </summary>
            <value>An array of ColourValue representing the colours of the verticies.</value>
        </member>
        <member name="P:Miyagi.Rendering.Quad.VertexPos">
            <summary>
            Gets or sets the positions of the verticies.
            </summary>
            <value>An array of Vector3 representing the positions of the verticies.</value>
        </member>
        <member name="P:Miyagi.Rendering.Quad.VertexUV">
            <summary>
            Gets or sets the uv-coordinates of the verticies.
            </summary>
            <value>An array of Vector3 representing the uv-coordinates of the verticies.</value>
        </member>
        <member name="P:Miyagi.Rendering.Quad.Width">
            <summary>
            Gets the width of the Quad.
            </summary>
            <value>A float representing the width of the Quad.</value>
        </member>
        <member name="T:Miyagi.Plugin.ScriptingPlugin">
            <summary>
            Description of ScriptingPlugin.
            </summary>
        </member>
        <member name="T:Miyagi.Plugin.BasePlugin">
            <summary>
            The abstract base class for plugins.
            </summary>
        </member>
        <member name="M:Miyagi.Plugin.BasePlugin.#ctor(Miyagi.Core.GuiManager)">
            <summary>
            Initializes a new instance of the BasePlugin class.
            </summary>
            <param name="guiMgr">The GuiManager.</param>
        </member>
        <member name="M:Miyagi.Plugin.BasePlugin.OnPluginLoaded">
            <summary>
            Is called when the plugin is loaded.
            </summary>
        </member>
        <member name="M:Miyagi.Plugin.BasePlugin.OnPluginUnloaded">
            <summary>
            Is called when the plugin is unloaded.
            </summary>
        </member>
        <member name="P:Miyagi.Plugin.BasePlugin.Name">
            <summary>
            Gets the name of the plugin.
            </summary>
            <value>A string representing the name.</value>
        </member>
        <member name="P:Miyagi.Plugin.BasePlugin.GuiManager">
            <summary>
            Gets the GuiManager.
            </summary>
            <value>The GuiManager.</value>
        </member>
        <member name="M:Miyagi.Plugin.ScriptingPlugin.#ctor(Miyagi.Core.GuiManager)">
            <summary>
            Initializes a new instance of the ScriptingPlugin class.
            </summary>
            <param name="guiMgr">The GuiManager.</param>
        </member>
        <member name="M:Miyagi.Plugin.ScriptingPlugin.BindEvents(Miyagi.Controls.Events.EventScriptingScheme)">
            <summary>
            Binds the events.
            </summary>
            <param name="scheme">The EventScriptingScheme.</param>
        </member>
        <member name="M:Miyagi.Plugin.ScriptingPlugin.OnPluginLoaded">
            <summary>
            Is called when the plugin is loaded.
            </summary>
        </member>
        <member name="M:Miyagi.Plugin.ScriptingPlugin.OnPluginUnloaded">
            <summary>
            Is called when the plugin is unloaded.
            </summary>
        </member>
        <member name="M:Miyagi.Plugin.ScriptingPlugin.RegisterScriptingPlugin">
            <summary>
            Registers the scripting plugin.
            </summary>
        </member>
        <member name="M:Miyagi.Plugin.ScriptingPlugin.UnregisterScriptingPlugin">
            <summary>
            Unregisters the scripting plugin.
            </summary>
        </member>
        <member name="P:Miyagi.Plugin.ScriptingPlugin.Extensions">
            <summary>
            Gets a collection of extensions.
            </summary>
            <value>A collection of extensions.</value>
        </member>
        <member name="T:Miyagi.Internals.NativeMethods">
            <summary>
            Contains native methods.
            </summary>
        </member>
        <member name="T:Miyagi.Controls.Slider">
            <summary>
            A Slider control.
            </summary>
        </member>
        <member name="T:Miyagi.Controls.Elements.Owner.IThumbElementOwner">
            <summary>
            Enables a class the be the parent of a ThumbElement.
            </summary>
        </member>
        <member name="P:Miyagi.Controls.Elements.Owner.IThumbElementOwner.CombinedMaterialName">
            <summary>
            Gets the combined name of the material.
            </summary>
            <value>The combined material name.</value>
        </member>
        <member name="P:Miyagi.Controls.Elements.Owner.IThumbElementOwner.Inverted">
            <summary>
            Gets a value indicating whether the IThumbElementOwner is inverted.
            </summary>
            <value>If true Min is the upmost / rightmost point and Max is the downmost / leftmost point of the IThumbElementOwner.</value>
        </member>
        <member name="P:Miyagi.Controls.Elements.Owner.IThumbElementOwner.MaterialScheme">
            <summary>
            Gets the MaterialScheme of a control.
            </summary>
            <value>A MaterialScheme.</value>
        </member>
        <member name="P:Miyagi.Controls.Elements.Owner.IThumbElementOwner.Max">
            <summary>
            Gets the maximum value.
            </summary>
            <value>The maximum value.</value>
        </member>
        <member name="P:Miyagi.Controls.Elements.Owner.IThumbElementOwner.Min">
            <summary>
            Gets the minimum value.
            </summary>
            <value>The minimum value.</value>
        </member>
        <member name="P:Miyagi.Controls.Elements.Owner.IThumbElementOwner.Value">
            <summary>
            Gets the value of the IThumbElementOwner.
            </summary>
            <value>The value of the IThumbElementOwner.</value>
        </member>
        <member name="M:Miyagi.Controls.Slider.#ctor(System.String)">
            <summary>
            Initializes a new instance of the Slider class.
            </summary>
            <param name="name">The name of the Slider.</param>
        </member>
        <member name="M:Miyagi.Controls.Slider.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the Slider class.
            </summary>
            <param name="name">The name of the Slider.</param>
            <param name="material">The material of the Slider.</param>
        </member>
        <member name="M:Miyagi.Controls.Slider.#ctor(System.String,System.String,Miyagi.Core.Size)">
            <summary>
            Initializes a new instance of the Slider class.
            </summary>
            <param name="name">The name of the Slider.</param>
            <param name="material">The material of the Slider.</param>
            <param name="size">The size of the Slider.</param>
        </member>
        <member name="M:Miyagi.Controls.Slider.#ctor(System.String,System.String,Miyagi.Core.Size,Miyagi.Core.Position)">
            <summary>
            Initializes a new instance of the Slider class.
            </summary>
            <param name="name">The name of the Slider.</param>
            <param name="material">The material of the Slider.</param>
            <param name="size">The size of the Slider.</param>
            <param name="position">The position of the Slider.</param>
        </member>
        <member name="M:Miyagi.Controls.Slider.ResetPositionAndSize">
            <summary>
            Resets the position and size of the control.
            </summary>
        </member>
        <member name="M:Miyagi.Controls.Slider.OnKeyPressed(Miyagi.Controls.Events.KeyEvent)">
            <summary>
            Handles key presses.
            </summary>
            <param name="arg">The KeyEvent.</param>
        </member>
        <member name="M:Miyagi.Controls.Slider.OnMouseDrag(System.Int32,System.Int32)">
            <summary>
            Handles mouse drags.
            </summary>
            <param name="x">The x-coordinate.</param>
            <param name="y">The y-coordinate.</param>
        </member>
        <member name="M:Miyagi.Controls.Slider.OnMousePressed(Miyagi.Core.MouseButton)">
            <summary>
            Handles mouse press events.
            </summary>
            <param name="mb">The mouse button.</param>
        </member>
        <member name="M:Miyagi.Controls.Slider.OnMouseReleased(Miyagi.Core.MouseButton)">
            <summary>
            Handles mouse release events.
            </summary>
            <param name="mb">The mouse button.</param>
        </member>
        <member name="M:Miyagi.Controls.Slider.OnMouseWheelMoved(System.Int32)">
            <summary>
            Handles mouse wheel events.
            </summary>
            <param name="z">The mouse wheel value.</param>
        </member>
        <member name="M:Miyagi.Controls.Slider.Update">
            <summary>
            Updates the control.
            </summary>
        </member>
        <member name="M:Miyagi.Controls.Slider.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the control.
            </summary>
            <param name="disposing">Whether Dispose has been called.</param>
        </member>
        <member name="M:Miyagi.Controls.Slider.HitTestElements(System.Int32,System.Int32)">
            <summary>
            Performs a hit test for the elements of the control.
            </summary>
            <param name="x">The x-coordinate.</param>
            <param name="y">The y-coordinate.</param>
            <returns>True if an element is hit, otherwise false.</returns>
        </member>
        <member name="M:Miyagi.Controls.Slider.OnSizeChanged(Miyagi.Core.Size,Miyagi.Core.Size)">
            <summary>
            Handles size changes.
            </summary>
            <param name="oldSize">The old size.</param>
            <param name="newSize">The new size.</param>
        </member>
        <member name="M:Miyagi.Controls.Slider.OnValueChanged(System.Int32,System.Int32)">
            <summary>
            Handles value changes.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="E:Miyagi.Controls.Slider.ValueChanged">
            <summary>
            Occurs when the Value property is changed.
            </summary>
        </member>
        <member name="P:Miyagi.Controls.Slider.IgnoreBackgroundClicks">
            <summary>
            Gets or sets a value indicating whether the mouse clicks on the background set the position of the thumb.
            </summary>
            <value>If set to true, the thumb doesn't move without being grabbed. Default is false.</value>
        </member>
        <member name="P:Miyagi.Controls.Slider.Inverted">
            <summary>
            Gets or sets a value indicating whether the Slider is inverted.
            </summary>
            <value>If true Min is the upmost / rightmost point and Max is the downmost / leftmost point of the Slider.</value>
        </member>
        <member name="P:Miyagi.Controls.Slider.LargeChange">
            <summary>
            Gets or sets the value which it added or subtracted if PageUp or PageDown is pressed.
            </summary>
            <value>An int representing the value.</value>
        </member>
        <member name="P:Miyagi.Controls.Slider.Max">
            <summary>
            Gets or sets the maximum value of the Slider.
            </summary>
            <value>The maximum value.</value>
            <remarks>Max will be set to Min if it is set to a value smaller than Min.</remarks>
        </member>
        <member name="P:Miyagi.Controls.Slider.Min">
            <summary>
            Gets or sets the minimum value of the Slider.
            </summary>
            <value>The minimum value.</value>
            <remarks>Min will be set to Max if it is set to a value larger than Max.</remarks>
        </member>
        <member name="P:Miyagi.Controls.Slider.SmallChange">
            <summary>
            Gets or sets the value which it added or subtracted if the mouse wheel is moved or the arrow keys are pressed.
            </summary>
            <value>An int representing the value.</value>
        </member>
        <member name="P:Miyagi.Controls.Slider.Thumb">
            <summary>
            Gets or sets the thumb of the Slider.
            </summary>
            <value>A ThumbElement representing the thumb of the Slider.</value>
        </member>
        <member name="P:Miyagi.Controls.Slider.Value">
            <summary>
            Gets or sets the value of the Slider.
            </summary>
            <value>The value of the Slider.</value>
            <remarks>Value will be set to Max if the value is larger than Max, and set to Min if the value is smaller than Min.</remarks>
        </member>
        <member name="P:Miyagi.Controls.Slider.UpdateType">
            <summary>
            Gets or sets the UpdateType.
            </summary>
            <value>An UpdateType representing what should be changed when the control is updated.</value>
        </member>
        <member name="P:Miyagi.Controls.Slider.ElementBucket">
            <summary>
            Gets a list of elements.
            </summary>
            <value>A list of elements.</value>
        </member>
        <member name="T:Miyagi.Controls.DialogBox">
            <summary>
            A DialogBox.
            </summary>
        </member>
        <member name="T:Miyagi.Core.IModalDialog">
            <summary>
            Enables a class to be a modal dialog.
            </summary>
        </member>
        <member name="M:Miyagi.Core.IModalDialog.GetTopControlAt(System.Int32,System.Int32)">
            <summary>
            Returns the topmost control at the specified position.
            </summary>
            <param name="x">The x-coordinate of the position where you want to look for a control.</param>
            <param name="y">The y-coordinate of the position where you want to look for a control.</param>
            <returns>If there is a control at the position the topmost, else null.</returns>
        </member>
        <member name="M:Miyagi.Core.IModalDialog.OnMouseMoved">
            <summary>
            Signals that the mouse has been moved.
            </summary>
        </member>
        <member name="M:Miyagi.Core.IModalDialog.Update">
            <summary>
            Updated the modal dialog.
            </summary>
        </member>
        <member name="M:Miyagi.Controls.DialogBox.Deserialize(System.Xml.XmlNode)">
            <summary>
            Deserializes DialogBox settings from an XmlNode.
            </summary>
            <param name="node">The XmlNode containing the settings.</param>
        </member>
        <member name="M:Miyagi.Controls.DialogBox.Serialize(System.Xml.XmlTextWriter)">
            <summary>
            Serializes the DialogBox settings to an XmlTextWriter.
            </summary>
            <param name="xtw">The XmlTextWriter.</param>
        </member>
        <member name="M:Miyagi.Controls.DialogBox.SetDefaults">
            <summary>
            Sets the settings of the DialogBox to their defaults.
            </summary>
        </member>
        <member name="M:Miyagi.Controls.DialogBox.Show(System.String,System.String,Miyagi.Core.DialogBoxButtons)">
            <summary>
            Shows the DialogBox.
            </summary>
            <param name="text">The text of the DialogBox.</param>
            <param name="title">The title of the DialogBox.</param>
            <param name="buttons">The buttons of the DialogBox.</param>
            <returns>A DialogResult enum representing the pressed button.</returns>
        </member>
        <member name="P:Miyagi.Controls.DialogBox.ButtonSize">
            <summary>
            Gets or sets the size of the Buttons.
            </summary>
            <value>The size of the Buttons.</value>
        </member>
        <member name="P:Miyagi.Controls.DialogBox.ButtonTextOffset">
            <summary>
            Gets or sets the text offset of the Buttons.
            </summary>
            <value>The text offset of the Buttons.</value>
        </member>
        <member name="P:Miyagi.Controls.DialogBox.LabelTextOffset">
            <summary>
            Gets or sets the text offset of the Labels.
            </summary>
            <value>The text offset of the Labels.</value>
        </member>
        <member name="P:Miyagi.Controls.DialogBox.Position">
            <summary>
            Gets or sets the position of the DialogBox.
            </summary>
            <value>The position of the DialogBox.</value>
        </member>
        <member name="P:Miyagi.Controls.DialogBox.Size">
            <summary>
            Gets or sets the size of the DialogBox.
            </summary>
            <value>The size of the DialogBox.</value>
        </member>
        <member name="P:Miyagi.Controls.DialogBox.TextCancel">
            <summary>
            Gets or sets the text of the Cancel button.
            </summary>
            <value>A string representing the text of the Cancel button.</value>
        </member>
        <member name="P:Miyagi.Controls.DialogBox.TextNo">
            <summary>
            Gets or sets the text of the No button.
            </summary>
            <value>A string representing the text of the No button.</value>
        </member>
        <member name="P:Miyagi.Controls.DialogBox.TextOk">
            <summary>
            Gets or sets the text of the Ok button.
            </summary>
            <value>A string representing the text of the Ok button.</value>
        </member>
        <member name="P:Miyagi.Controls.DialogBox.TextYes">
            <summary>
            Gets or sets the text of the Yes button.
            </summary>
            <value>A string representing the text of the Yes button.</value>
        </member>
        <member name="T:Miyagi.Rendering.SpriteRenderer">
            <summary>
            A sprite renderer.
            </summary>
        </member>
        <member name="M:Miyagi.Rendering.SpriteRenderer.#ctor">
            <summary>
            Initializes a new instance of the SpriteRenderer class.
            </summary>
        </member>
        <member name="M:Miyagi.Rendering.SpriteRenderer.AddSprite(Miyagi.Rendering.Sprite)">
            <summary>
            Adds a Sprite to the Renderer.
            </summary>
            <param name="sprite">The sprites to add.</param>
        </member>
        <member name="M:Miyagi.Rendering.SpriteRenderer.Dispose">
            <summary>
            Disposes the Renderer.
            </summary>
        </member>
        <member name="M:Miyagi.Rendering.SpriteRenderer.GetLastSprite(System.Collections.Generic.List{Miyagi.Rendering.Sprite})">
            <summary>
            Gets the sprite rendered last in the specified list.
            </summary>
            <param name="list">The list of sprites.</param>
            <returns>The Sprite rendered last.</returns>
        </member>
        <member name="M:Miyagi.Rendering.SpriteRenderer.RemoveSprite(Miyagi.Rendering.Sprite)">
            <summary>
            Removes the specified sprites.
            </summary>
            <param name="sprite">The sprites to remove.</param>
        </member>
        <member name="M:Miyagi.Rendering.SpriteRenderer.RenderSprites">
            <summary>
            Renders the sprites.
            </summary>
        </member>
        <member name="M:Miyagi.Rendering.SpriteRenderer.SortSprites">
            <summary>
            Sorts the sprites.
            </summary>
        </member>
        <member name="P:Miyagi.Rendering.SpriteRenderer.ZOrder">
            <summary>
            Gets the ZOrder.
            </summary>
            <value>An int representing the ZOrder.</value>
        </member>
        <member name="T:Miyagi.Rendering.SpriteRenderer.Comparer">
            <summary>
            Comparer for Renderer.
            </summary>
        </member>
        <member name="T:Miyagi.Controls.Elements.ListBoxItemElement">
            <summary>
            An element for displaying a ListBox item.
            </summary>
        </member>
        <member name="M:Miyagi.Controls.Elements.ListBoxItemElement.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ListBoxItemElement class.
            </summary>
            <param name="name">The name of the ListBoxItemElement.</param>
        </member>
        <member name="M:Miyagi.Controls.Elements.ListBoxItemElement.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the ListBoxItemElement class.
            </summary>
            <param name="text">The text if the ListBoxItemElement.</param>
            <param name="textureName">The name of the texture.</param>
        </member>
        <member name="M:Miyagi.Controls.Elements.ListBoxItemElement.op_Implicit(System.String)~Miyagi.Controls.Elements.ListBoxItemElement">
            <summary>
            Converts a instance of string in a new instance of ListBoxItemElement.
            </summary>
            <param name="s">The string to convert.</param>
            <returns>A ListBoxItemElement representing the string.</returns>
        </member>
        <member name="M:Miyagi.Controls.Elements.ListBoxItemElement.op_Implicit(Miyagi.Controls.Elements.ListBoxItemElement)~System.String">
            <summary>
            Converts a instance of ListBoxItemElement in a new instance of string.
            </summary>
            <param name="lbi">The TextElement to convert.</param>
            <returns>A string representing the ListBoxItemElement.</returns>
        </member>
        <member name="M:Miyagi.Controls.Elements.ListBoxItemElement.Serialize(System.Xml.XmlTextWriter)">
            <summary>
            Serializes the ListBoxItemElement to Xml.
            </summary>
            <param name="xtw">The XmlTextWriter.</param>
        </member>
        <member name="M:Miyagi.Controls.Elements.ListBoxItemElement.ApplyOpacity">
            <summary>
            Applies the opacity.
            </summary>
        </member>
        <member name="M:Miyagi.Controls.Elements.ListBoxItemElement.ApplyTextureFiltering">
            <summary>
            Applies the TextureFiltering.
            </summary>
        </member>
        <member name="M:Miyagi.Controls.Elements.ListBoxItemElement.ApplyVisibility">
            <summary>
            Applies the visibility.
            </summary>
        </member>
        <member name="M:Miyagi.Controls.Elements.ListBoxItemElement.ApplyZOrder">
            <summary>
            Applies the ZOrder.
            </summary>
        </member>
        <member name="M:Miyagi.Controls.Elements.ListBoxItemElement.GetZOrder">
            <summary>
            Gets the ZOrder.
            </summary>
            <returns>An int representing the zorder.</returns>
        </member>
        <member name="M:Miyagi.Controls.Elements.ListBoxItemElement.Move(Mogre.Vector3)">
            <summary>
            Moves the sprites of the element.
            </summary>
            <param name="diff">The distance to move.</param>
        </member>
        <member name="M:Miyagi.Controls.Elements.ListBoxItemElement.RemoveSprites">
            <summary>
            Removes the sprites.
            </summary>
        </member>
        <member name="M:Miyagi.Controls.Elements.ListBoxItemElement.Update">
            <summary>
            Updates the element.
            </summary>
        </member>
        <member name="M:Miyagi.Controls.Elements.ListBoxItemElement.GetOwner">
            <summary>
            Gets the owner.
            </summary>
            <returns>An IElementOwner representing the owner of the element.</returns>
        </member>
        <member name="P:Miyagi.Controls.Elements.ListBoxItemElement.Name">
            <summary>
            Gets or sets the name of the ListBoxItemElement.
            </summary>
            <value>A string representing the name of the ListBoxItemElement.</value>
        </member>
        <member name="P:Miyagi.Controls.Elements.ListBoxItemElement.Position">
            <summary>
            Gets the position of the ListBoxItemElement.
            </summary>
            <value>The position of the ListBoxItemElement.</value>
        </member>
        <member name="P:Miyagi.Controls.Elements.ListBoxItemElement.Size">
            <summary>
            Gets the size of the ListBoxItemElement.
            </summary>
            <value>The size of the ListBoxItemElement.</value>
        </member>
        <member name="P:Miyagi.Controls.Elements.ListBoxItemElement.Text">
            <summary>
            Gets or sets the text of the ListBoxItemElement.
            </summary>
            <value>A TextElement representing the text of the ListBoxItemElement.</value>
        </member>
        <member name="P:Miyagi.Controls.Elements.ListBoxItemElement.Texture">
            <summary>
            Gets or sets the texture.
            </summary>
            <value>A TextureElement representing the texture of the ListBoxItemElement.</value>
        </member>
        <member name="P:Miyagi.Controls.Elements.ListBoxItemElement.SpriteBucket">
            <summary>
            Gets a list of sprites.
            </summary>
            <value>A list of sprites.</value>
        </member>
        <member name="P:Miyagi.Controls.Elements.ListBoxItemElement.UpdateType">
            <summary>
            Gets or sets the UpdateType.
            </summary>
            <value>An UpdateType representing what should be changed when the element is updated.</value>
        </member>
        <member name="T:Miyagi.Core.Cursor">
            <summary>
            A mouse cursor.
            </summary>
        </member>
        <member name="F:Miyagi.Core.Cursor.Main">
            <summary>
            The name of the main cursor.
            </summary>
        </member>
        <member name="F:Miyagi.Core.Cursor.ResizeBottom">
            <summary>
            The name of the ResizeBottom cursor.
            </summary>
        </member>
        <member name="F:Miyagi.Core.Cursor.ResizeBottomLeft">
            <summary>
            The name of the ResizeBottomLeft cursor.
            </summary>
        </member>
        <member name="F:Miyagi.Core.Cursor.ResizeBottomRight">
            <summary>
            The name of the ResizeBottomRight cursor.
            </summary>
        </member>
        <member name="F:Miyagi.Core.Cursor.ResizeLeft">
            <summary>
            The name of the ResizeLeft cursor.
            </summary>
        </member>
        <member name="F:Miyagi.Core.Cursor.ResizeRight">
            <summary>
            The name of the ResizeRight cursor.
            </summary>
        </member>
        <member name="F:Miyagi.Core.Cursor.ResizeTop">
            <summary>
            The name of the ResizeTop cursor.
            </summary>
        </member>
        <member name="F:Miyagi.Core.Cursor.ResizeTopLeft">
            <summary>
            The name of the ResizeTopLeft cursor.
            </summary>
        </member>
        <member name="F:Miyagi.Core.Cursor.ResizeTopRight">
            <summary>
            The name of the ResizeTopRight cursor.
            </summary>
        </member>
        <member name="M:Miyagi.Core.Cursor.#ctor(System.String,Miyagi.Core.Size,Miyagi.Core.Position,System.Boolean)">
            <summary>
            Initializes a new instance of the Cursor class.
            </summary>
            <param name="material">The name of the cursor's MaterialScheme.</param>
            <param name="size">The size of the cursor.</param>
            <param name="hotspotPosition">The position of the cursor's main hotspot.</param>
            <param name="visibility">Whether the cursor is initially visible.</param>
        </member>
        <member name="M:Miyagi.Core.Cursor.Dispose">
            <summary>
            Releases the unmanaged resources used by the cursor.
            </summary>
        </member>
        <member name="M:Miyagi.Core.Cursor.Serialize(System.Xml.XmlTextWriter)">
            <summary>
            Serializes the cursor to Xml.
            </summary>
            <param name="xtw">The XmlTextWriter.</param>
        </member>
        <member name="M:Miyagi.Core.Cursor.Update">
            <summary>
            Updates the Cursor.
            </summary>
        </member>
        <member name="M:Miyagi.Core.Cursor.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the cursor.
            </summary>
            <param name="disposing">Whether Dispose has been called.</param>
        </member>
        <member name="P:Miyagi.Core.Cursor.BuiltInNames">
            <summary>
            Gets a collection containing all built-in cursor names.
            </summary>
            <value>Returns a collection containing all built-in cursor names.</value>
        </member>
        <member name="P:Miyagi.Core.Cursor.ActiveCursor">
            <summary>
            Gets or sets the active cursor.
            </summary>
            <value>The name of the active cursor.</value>
        </member>
        <member name="P:Miyagi.Core.Cursor.ActiveHotspot">
            <summary>
            Gets the active hotspot.
            </summary>
            <value>The active hotspot.</value>
        </member>
        <member name="P:Miyagi.Core.Cursor.Hotspots">
            <summary>
            Gets a dictionary of hotspot coordinates.
            </summary>
            <value>The dictionary of hotspot coordinates.</value>
        </member>
        <member name="P:Miyagi.Core.Cursor.MaterialScheme">
            <summary>
            Gets or sets the MaterialScheme of a control.
            </summary>
            <value>A MaterialScheme.</value>
        </member>
        <member name="P:Miyagi.Core.Cursor.MaterialSchemeName">
            <summary>
            Gets or sets the name of the assigned material.
            </summary>
            <value>A string representing the material name.</value>
        </member>
        <member name="P:Miyagi.Core.Cursor.Position">
            <summary>
            Gets the position of the cursor.
            </summary>
            <value>The position.</value>
        </member>
        <member name="P:Miyagi.Core.Cursor.Size">
            <summary>
            Gets or sets the size of the cursor.
            </summary>
            <value>The size in pixels.</value>
        </member>
        <member name="P:Miyagi.Core.Cursor.Visible">
            <summary>
            Gets or sets a value indicating whether the control and its children are visible.
            </summary>
            <value>If the cursor is visible true, otherwise false.</value>
        </member>
        <member name="T:Miyagi.Collections.ColourCollection">
            <summary>
            A custom collection of ColourDefinitions.
            </summary>
        </member>
        <member name="M:Miyagi.Collections.ColourCollection.#ctor(Miyagi.Core.TextScheme)">
            <summary>
            Initializes a new instance of the ColourCollection class.
            </summary>
            <param name="owner">The owner of the ColourCollection.</param>
        </member>
        <member name="P:Miyagi.Collections.ColourCollection.Item(Miyagi.Core.MaterialChangingEvent)">
            <summary>
            Gets or sets a colour by MaterialChangingEvent.
            </summary>
            <param name="materialEvent">The MaterialChangingEvent of the colour.</param>
        </member>
        <member name="T:Miyagi.Collections.TextureCollection">
            <summary>
            A custom collection of textures.
            </summary>
        </member>
        <member name="M:Miyagi.Collections.TextureCollection.#ctor(Miyagi.Core.MaterialScheme)">
            <summary>
            Initializes a new instance of the TextureCollection class.
            </summary>
            <param name="owner">The owner of the TextureCollection.</param>
        </member>
        <member name="M:Miyagi.Collections.TextureCollection.ContainsKey(System.String)">
            <summary>
            Determinates whether the TextureCollection contains a texture of the specified material.
            </summary>
            <param name="material">The material.</param>
            <returns>True if the TextureCollection contains a texture of the specified material, otherwise false.</returns>
        </member>
        <member name="M:Miyagi.Collections.TextureCollection.GetEnumerator">
            <summary>
            Returns the enumerator of the collection.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="P:Miyagi.Collections.TextureCollection.Item(System.String)">
            <summary>
            Gets or sets a texture by material name.
            </summary>
            <param name="material">The material name of the texture.</param>
        </member>
        <member name="T:Miyagi.Serialization.XmlSerializer">
            <summary>
            Imports and exports GUIs and TextSchemes to and from Xml.
            </summary>
        </member>
        <member name="M:Miyagi.Serialization.XmlSerializer.#ctor(Miyagi.Core.GuiManager)">
            <summary>
            Initializes a new instance of the XmlSerializer class.
            </summary>
            <param name="guiMgr">The GuiManager.</param>
        </member>
        <member name="M:Miyagi.Serialization.XmlSerializer.ExportToFile(System.String)">
            <summary>
            Exports to a .mgx file.
            </summary>
            <param name="path">The path of the file.</param>
        </member>
        <member name="M:Miyagi.Serialization.XmlSerializer.ExportToFile(System.String,Miyagi.Core.SerializerFilters)">
            <summary>
            Exports to a .mgx file.
            </summary>
            <param name="path">The path of the file.</param>
            <param name="filters">A bitwise combination of <see cref="T:Miyagi.Core.SerializerFilters"/> representing which elements will be exported.</param>
        </member>
        <member name="M:Miyagi.Serialization.XmlSerializer.ImportAll">
            <summary>
            Imports all .mgx files from the <see cref="P:Miyagi.Core.GuiManager.ResourceGroupName"/> of the specified resource group.
            </summary>
        </member>
        <member name="M:Miyagi.Serialization.XmlSerializer.ImportFromFile(System.String)">
            <summary>
            Imports a .mgx file.
            </summary>
            <param name="path">The path of the file.</param>
        </member>
        <member name="M:Miyagi.Serialization.XmlSerializer.ImportFromFile(System.String,Miyagi.Core.SerializerFilters)">
            <summary>
            Imports a .mgx file.
            </summary>
            <param name="path">The path of the file.</param>
            <param name="filters">A bitwise combination of <see cref="T:Miyagi.Core.SerializerFilters"/> representing which elements will be imported.</param>
        </member>
        <member name="P:Miyagi.Serialization.XmlSerializer.Filters">
            <summary>
            Gets or sets the filters of the XmlSerializer.
            </summary>
            <value>A bitwise combination of SerializerFilters representing the filters of the XmlSerializer.</value>
        </member>
        <member name="T:Miyagi.Core.AnchorStyles">
            <summary>
            Specifies the AnchorStyle.
            </summary>
        </member>
        <member name="F:Miyagi.Core.AnchorStyles.None">
            <summary>
            The object is not anchored.
            </summary>
        </member>
        <member name="F:Miyagi.Core.AnchorStyles.Left">
            <summary>
            Left anchor.
            </summary>
        </member>
        <member name="F:Miyagi.Core.AnchorStyles.Top">
            <summary>
            Top anchor.
            </summary>
        </member>
        <member name="F:Miyagi.Core.AnchorStyles.Right">
            <summary>
            Right anchor.
            </summary>
        </member>
        <member name="F:Miyagi.Core.AnchorStyles.Bottom">
            <summary>
            Bottom anchor.
            </summary>
        </member>
        <member name="T:Miyagi.Core.DialogBoxButtons">
            <summary>
            Specifies the DialogBoxButtons.
            </summary>
        </member>
        <member name="F:Miyagi.Core.DialogBoxButtons.None">
            <summary>
            No Buttons.
            </summary>
        </member>
        <member name="F:Miyagi.Core.DialogBoxButtons.Ok">
            <summary>
            The Ok Button.
            </summary>
        </member>
        <member name="F:Miyagi.Core.DialogBoxButtons.Cancel">
            <summary>
            The Cancel Button.
            </summary>
        </member>
        <member name="F:Miyagi.Core.DialogBoxButtons.OkCancel">
            <summary>
            Ok and Cancel Buttons.
            </summary>
        </member>
        <member name="F:Miyagi.Core.DialogBoxButtons.Yes">
            <summary>
            The Yes Button.
            </summary>
        </member>
        <member name="F:Miyagi.Core.DialogBoxButtons.No">
            <summary>
            The No Button.
            </summary>
        </member>
        <member name="F:Miyagi.Core.DialogBoxButtons.YesNo">
            <summary>
            Yes and No Buttons.
            </summary>
        </member>
        <member name="F:Miyagi.Core.DialogBoxButtons.YesNoCancel">
            <summary>
            Yes, No and Cancel Buttons.
            </summary>
        </member>
        <member name="T:Miyagi.Core.DialogResult">
            <summary>
            Specifies the result of a modal dialog.
            </summary>
        </member>
        <member name="F:Miyagi.Core.DialogResult.None">
            <summary>
            No result.
            </summary>
        </member>
        <member name="F:Miyagi.Core.DialogResult.Ok">
            <summary>
            The result is Okay.
            </summary>
        </member>
        <member name="F:Miyagi.Core.DialogResult.Cancel">
            <summary>
            The result is Cancel.
            </summary>
        </member>
        <member name="F:Miyagi.Core.DialogResult.Yes">
            <summary>
            The result is Yes.
            </summary>
        </member>
        <member name="F:Miyagi.Core.DialogResult.No">
            <summary>
            The result is No.
            </summary>
        </member>
        <member name="T:Miyagi.Core.GuiMode">
            <summary>
            Specifies the modes of a GUI.
            </summary>
        </member>
        <member name="F:Miyagi.Core.GuiMode.Normal">
            <summary>
            The normal GUI behaviour.
            </summary>
        </member>
        <member name="F:Miyagi.Core.GuiMode.Modal">
            <summary>
            If this GUI is visible, all other guis are blocked.
            </summary>
        </member>
        <member name="F:Miyagi.Core.GuiMode.XPopup">
            <summary>
            The GUI pops up between certain X-coordinates.
            </summary>
        </member>
        <member name="F:Miyagi.Core.GuiMode.YPopup">
            <summary>
            The GUI pops up between certain Y-coordinates.
            </summary>
        </member>
        <member name="T:Miyagi.Core.MaterialChangingEvent">
            <summary>
            Material changing events.
            </summary>
        </member>
        <member name="F:Miyagi.Core.MaterialChangingEvent.MousePressed">
            <summary>
            Occurs when the mouse is pressed.
            </summary>
        </member>
        <member name="F:Miyagi.Core.MaterialChangingEvent.MouseReleased">
            <summary>
            Occurs when the mouse is released.
            </summary>
        </member>
        <member name="F:Miyagi.Core.MaterialChangingEvent.MouseEnter">
            <summary>
            Occurs when the mouse is over the control.
            </summary>
        </member>
        <member name="F:Miyagi.Core.MaterialChangingEvent.MouseLeave">
            <summary>
            Occurs when the mouse leaves the control.
            </summary>
        </member>
        <member name="T:Miyagi.Core.MouseButton">
            <summary>
            Specifies a mouse button.
            </summary>
        </member>
        <member name="F:Miyagi.Core.MouseButton.Left">
            <summary>
            The left mouse button.
            </summary>
        </member>
        <member name="F:Miyagi.Core.MouseButton.Middle">
            <summary>
            The middle mouse button.
            </summary>
        </member>
        <member name="F:Miyagi.Core.MouseButton.Right">
            <summary>
            The right mouse button.
            </summary>
        </member>
        <member name="T:Miyagi.Core.Orientation">
            <summary>
            Specifies the orientation of a control.
            </summary>
        </member>
        <member name="F:Miyagi.Core.Orientation.Horizontal">
            <summary>
            Horizontal orientation.
            </summary>
        </member>
        <member name="F:Miyagi.Core.Orientation.Vertical">
            <summary>
            Vertical orientation.
            </summary>
        </member>
        <member name="T:Miyagi.Core.ResizeModes">
            <summary>
            Specifies the orientation of a control.
            </summary>
        </member>
        <member name="F:Miyagi.Core.ResizeModes.None">
            <summary>
            Not resizable.
            </summary>
        </member>
        <member name="F:Miyagi.Core.ResizeModes.Horizontal">
            <summary>
            Horizontally resizable.
            </summary>
        </member>
        <member name="F:Miyagi.Core.ResizeModes.Vertical">
            <summary>
            Vertically resizable.
            </summary>
        </member>
        <member name="F:Miyagi.Core.ResizeModes.Diagonal">
            <summary>
            Diagonally resizable.
            </summary>
        </member>
        <member name="F:Miyagi.Core.ResizeModes.All">
            <summary>
            Fully resizable.
            </summary>
        </member>
        <member name="T:Miyagi.Core.RotationModes">
            <summary>
            Specifies the orientation of a control.
            </summary>
        </member>
        <member name="F:Miyagi.Core.RotationModes.None">
            <summary>
            No rotation.
            </summary>
        </member>
        <member name="F:Miyagi.Core.RotationModes.Horizontal">
            <summary>
            Horizontal rotation.
            </summary>
        </member>
        <member name="F:Miyagi.Core.RotationModes.Vertical">
            <summary>
            Vertical rotation.
            </summary>
        </member>
        <member name="F:Miyagi.Core.RotationModes.Both">
            <summary>
            Horizontal and vertical rotation.
            </summary>
        </member>
        <member name="T:Miyagi.Core.SerializerFilters">
            <summary>
            Specifies which elements will be exported or imported.
            </summary>
        </member>
        <member name="F:Miyagi.Core.SerializerFilters.None">
            <summary>
            Nothing will be exported or imported.
            </summary>
        </member>
        <member name="F:Miyagi.Core.SerializerFilters.TextSchemes">
            <summary>
            TextSchemes will be exported or imported.
            </summary>
        </member>
        <member name="F:Miyagi.Core.SerializerFilters.MaterialSchemes">
            <summary>
            MaterialSchemes will be exported or imported.
            </summary>
        </member>
        <member name="F:Miyagi.Core.SerializerFilters.Guis">
            <summary>
            Guis will be exported or imported.
            </summary>
        </member>
        <member name="F:Miyagi.Core.SerializerFilters.Settings">
            <summary>
            Settings will be exported or imported.
            </summary>
        </member>
        <member name="F:Miyagi.Core.SerializerFilters.Cursor">
            <summary>
            The cursor will be exported or imported.
            </summary>
        </member>
        <member name="F:Miyagi.Core.SerializerFilters.EventScriptingSchemes">
            <summary>
            EventScriptingSchemes will be exported or imported.
            </summary>
        </member>
        <member name="F:Miyagi.Core.SerializerFilters.All">
            <summary>
            Everything will be exported or imported.
            </summary>
        </member>
        <member name="T:Miyagi.Core.TextAlignment">
            <summary>
            Specifies the alignment of a text.
            </summary>
        </member>
        <member name="F:Miyagi.Core.TextAlignment.Left">
            <summary>
            Left alignment.
            </summary>
        </member>
        <member name="F:Miyagi.Core.TextAlignment.Right">
            <summary>
            Right alignment.
            </summary>
        </member>
        <member name="F:Miyagi.Core.TextAlignment.Center">
            <summary>
            Center alignment.
            </summary>
        </member>
        <member name="F:Miyagi.Core.TextAlignment.TopLeft">
            <summary>
            Top left alignment.
            </summary>
        </member>
        <member name="F:Miyagi.Core.TextAlignment.TopCenter">
            <summary>
            Top center alignment.
            </summary>
        </member>
        <member name="F:Miyagi.Core.TextAlignment.TopRight">
            <summary>
            Top right alignment.
            </summary>
        </member>
        <member name="F:Miyagi.Core.TextAlignment.BottomLeft">
            <summary>
            Bottom left alignment.
            </summary>
        </member>
        <member name="F:Miyagi.Core.TextAlignment.BottomCenter">
            <summary>
            Bottom center alignment.
            </summary>
        </member>
        <member name="F:Miyagi.Core.TextAlignment.BottomRight">
            <summary>
            Bottom right alignment.
            </summary>
        </member>
        <member name="T:Miyagi.Core.TextureFiltering">
            <summary>
            Specifies the texture filtering.
            </summary>
        </member>
        <member name="F:Miyagi.Core.TextureFiltering.None">
            <summary>
            No texture filtering.
            </summary>
        </member>
        <member name="F:Miyagi.Core.TextureFiltering.Anisotropic">
            <summary>
            Anisotropic texture filtering.
            </summary>
        </member>
        <member name="F:Miyagi.Core.TextureFiltering.Point">
            <summary>
            Point texture filtering.
            </summary>
        </member>
        <member name="F:Miyagi.Core.TextureFiltering.Linear">
            <summary>
            Linear texture filtering.
            </summary>
        </member>
        <member name="T:Miyagi.Core.TextureResizeMode">
            <summary>
            The resizing mode of a texture.
            </summary>
        </member>
        <member name="F:Miyagi.Core.TextureResizeMode.Crop">
            <summary>
            The texture is cropped to fit the size.
            </summary>
        </member>
        <member name="F:Miyagi.Core.TextureResizeMode.Stretch">
            <summary>
            The texture is stretched to fit the size.
            </summary>
        </member>
        <member name="T:Miyagi.Core.UpdateTypes">
            <summary>
            Specifies which updates have to be done.
            </summary>
        </member>
        <member name="F:Miyagi.Core.UpdateTypes.None">
            <summary>
            No update is required.
            </summary>
        </member>
        <member name="F:Miyagi.Core.UpdateTypes.Colour">
            <summary>
            The Colour requires an update.
            </summary>
        </member>
        <member name="F:Miyagi.Core.UpdateTypes.Opacity">
            <summary>
            The Opacity requires an update.
            </summary>
        </member>
        <member name="F:Miyagi.Core.UpdateTypes.Position">
            <summary>
            The Position requires an update.
            </summary>
        </member>
        <member name="F:Miyagi.Core.UpdateTypes.Size">
            <summary>
            The Size requires an update.
            </summary>
        </member>
        <member name="F:Miyagi.Core.UpdateTypes.Text">
            <summary>
            Text has to be recreated.
            </summary>
        </member>
        <member name="F:Miyagi.Core.UpdateTypes.Texture">
            <summary>
            The Texture requires an update.
            </summary>
        </member>
        <member name="F:Miyagi.Core.UpdateTypes.TextureFiltering">
            <summary>
            The TextureFiltering requires an update.
            </summary>
        </member>
        <member name="F:Miyagi.Core.UpdateTypes.UV">
            <summary>
            UV requires an update.
            </summary>
        </member>
        <member name="F:Miyagi.Core.UpdateTypes.Visibility">
            <summary>
            Visibility requires an update.
            </summary>
        </member>
        <member name="F:Miyagi.Core.UpdateTypes.ZOrder">
            <summary>
            The ZOrder requires an update.
            </summary>
        </member>
        <member name="T:Miyagi.Internals.Keyboard">
            <summary>
            Keyboard wrapper.
            </summary>
        </member>
        <member name="T:Miyagi.Core.Size">
            <summary>
            Stores a pair of ints representing a size.
            </summary>
        </member>
        <member name="F:Miyagi.Core.Size.Zero">
            <summary>
            Returns a Size with zero width and height.
            </summary>
        </member>
        <member name="M:Miyagi.Core.Size.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the Size struct.
            </summary>
            <param name="width">The width in pixels.</param>
            <param name="height">The height in pixels.</param>
        </member>
        <member name="M:Miyagi.Core.Size.op_Inequality(Miyagi.Core.Size,Miyagi.Core.Size)">
            <summary>
            Returns a value indicating whether two Size instances are not equal.
            </summary>
            <param name="left">A Size instance.</param>
            <param name="right">Another Size instance.</param>
            <returns>True if both are unequal, otherwise false.</returns>
        </member>
        <member name="M:Miyagi.Core.Size.op_Multiply(Miyagi.Core.Size,System.Double)">
            <summary>
            Multiplies the specified double.
            </summary>
            <param name="left">A Size instance.</param>
            <param name="right">The double multiplicand.</param>
            <returns>Left * Right.</returns>
        </member>
        <member name="M:Miyagi.Core.Size.op_Addition(Miyagi.Core.Size,Miyagi.Core.Size)">
            <summary>
            Adds the specified Size.
            </summary>
            <param name="left">A Size instance.</param>
            <param name="right">Another Size instance.</param>
            <returns>Left + Right.</returns>
        </member>
        <member name="M:Miyagi.Core.Size.op_Subtraction(Miyagi.Core.Size,Miyagi.Core.Size)">
            <summary>
            Subtracts the specified Size.
            </summary>
            <param name="left">A Size instance.</param>
            <param name="right">Another Size instance.</param>
            <returns>Left - Right.</returns>
        </member>
        <member name="M:Miyagi.Core.Size.op_Division(Miyagi.Core.Size,System.Double)">
            <summary>
            Divides the specified double.
            </summary>
            <param name="left">A Size instance.</param>
            <param name="right">The double divisor.</param>
            <returns>Left / Right.</returns>
        </member>
        <member name="M:Miyagi.Core.Size.op_Equality(Miyagi.Core.Size,Miyagi.Core.Size)">
            <summary>
            Returns a value indicating whether two Size instances are equal.
            </summary>
            <param name="left">A Size instance.</param>
            <param name="right">Another Size instance.</param>
            <returns>True if both are equal, otherwise false.</returns>
        </member>
        <member name="M:Miyagi.Core.Size.Parse(System.String)">
            <summary>
            Converts a string to a Size.
            </summary>
            <param name="s">The string to convert.</param>
            <returns>A Size representing the string.</returns>
        </member>
        <member name="M:Miyagi.Core.Size.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified Object.
            </summary>
            <param name="obj">The other Object.</param>
            <returns>True if both are equal, otherwise false.</returns>
        </member>
        <member name="M:Miyagi.Core.Size.Equals(Miyagi.Core.Size)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified Size.
            </summary>
            <param name="other">The other Size.</param>
            <returns>True if both are equal, otherwise false.</returns>
        </member>
        <member name="M:Miyagi.Core.Size.GetHashCode">
            <summary>
            Returns the HashCode of the current instance.
            </summary>
            <returns>The HashCode of the Size.</returns>
        </member>
        <member name="M:Miyagi.Core.Size.Serialize(System.Xml.XmlTextWriter)">
            <summary>
            Serializes the Size to Xml.
            </summary>
            <param name="xtw">The XmlTextWriter.</param>
        </member>
        <member name="M:Miyagi.Core.Size.ToString">
            <summary>
            Returns a string representation of the Size.
            </summary>
            <returns>A string representation of the Size.</returns>
        </member>
        <member name="P:Miyagi.Core.Size.Height">
            <summary>
            Gets the absolute height.
            </summary>
            <value>The absolute height in pixels.</value>
        </member>
        <member name="P:Miyagi.Core.Size.Width">
            <summary>
            Gets the absolute width.
            </summary>
            <value>The absolute width in pixels.</value>
        </member>
        <member name="T:Miyagi.Controls.Elements.ScrollBarElement">
            <summary>
            An element for displaying a scrollbar.
            </summary>
        </member>
        <member name="M:Miyagi.Controls.Elements.ScrollBarElement.#ctor">
            <summary>
            Initializes a new instance of the ScrollBarElement class.
            </summary>
        </member>
        <member name="M:Miyagi.Controls.Elements.ScrollBarElement.Hide">
            <summary>
            Hides the ScrollBarElement.
            </summary>
        </member>
        <member name="M:Miyagi.Controls.Elements.ScrollBarElement.Serialize(System.Xml.XmlTextWriter)">
            <summary>
            Serializes the ScrollBarElement to Xml.
            </summary>
            <param name="xtw">The XmlTextWriter.</param>
        </member>
        <member name="M:Miyagi.Controls.Elements.ScrollBarElement.Show">
            <summary>
            Shows the ScollBarElement.
            </summary>
        </member>
        <member name="M:Miyagi.Controls.Elements.ScrollBarElement.ApplyOpacity">
            <summary>
            Applies the opacity.
            </summary>
        </member>
        <member name="M:Miyagi.Controls.Elements.ScrollBarElement.ApplyTextureFiltering">
            <summary>
            Applies the TextureFiltering.
            </summary>
        </member>
        <member name="M:Miyagi.Controls.Elements.ScrollBarElement.ApplyVisibility">
            <summary>
            Applies the visibility.
            </summary>
        </member>
        <member name="M:Miyagi.Controls.Elements.ScrollBarElement.ApplyZOrder">
            <summary>
            Applies the ZOrder.
            </summary>
        </member>
        <member name="M:Miyagi.Controls.Elements.ScrollBarElement.GetZOrder">
            <summary>
            Gets the ZOrder.
            </summary>
            <returns>An int representing the zorder.</returns>
        </member>
        <member name="M:Miyagi.Controls.Elements.ScrollBarElement.Move(Mogre.Vector3)">
            <summary>
            Moves the sprites of the element.
            </summary>
            <param name="diff">The distance to move.</param>
        </member>
        <member name="M:Miyagi.Controls.Elements.ScrollBarElement.RemoveSprites">
            <summary>
            Removes the sprites.
            </summary>
        </member>
        <member name="M:Miyagi.Controls.Elements.ScrollBarElement.Update">
            <summary>
            Updates the element.
            </summary>
        </member>
        <member name="M:Miyagi.Controls.Elements.ScrollBarElement.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the element.
            </summary>
            <param name="disposing">Whether Dispose has been called.</param>
        </member>
        <member name="M:Miyagi.Controls.Elements.ScrollBarElement.GetOwner">
            <summary>
            Gets the owner.
            </summary>
            <returns>An IElementOwner representing the owner of the element.</returns>
        </member>
        <member name="E:Miyagi.Controls.Elements.ScrollBarElement.ValueChanged">
            <summary>
            Occurs when the Value property is changed.
            </summary>
        </member>
        <member name="P:Miyagi.Controls.Elements.ScrollBarElement.AlwaysVisible">
            <summary>
            Gets or sets a value indicating whether the ScrollBar is always visible.
            </summary>
            <value>True if the ScrollBar is always visible, otherwise false.</value>
        </member>
        <member name="P:Miyagi.Controls.Elements.ScrollBarElement.Border">
            <summary>
            Gets or sets the border.
            </summary>
            <value>A BorderElement representing the border of the control.</value>
        </member>
        <member name="P:Miyagi.Controls.Elements.ScrollBarElement.DerivedPosition">
            <summary>
            Gets the derived position of a ScrollBarElement.
            </summary>
            <value>The derived position of a ScrollBarElement.</value>
        </member>
        <member name="P:Miyagi.Controls.Elements.ScrollBarElement.Max">
            <summary>
            Gets the maximum value of the ScrollBarElement.
            </summary>
            <value>The maximum value.</value>
        </member>
        <member name="P:Miyagi.Controls.Elements.ScrollBarElement.Min">
            <summary>
            Gets the minimum value of the ScrollBarElement.
            </summary>
            <value>The minimum value.</value>
        </member>
        <member name="P:Miyagi.Controls.Elements.ScrollBarElement.Position">
            <summary>
            Gets the position of the ScrollBarElement.
            </summary>
            <value>The position of the ScrollBarElement.</value>
        </member>
        <member name="P:Miyagi.Controls.Elements.ScrollBarElement.Size">
            <summary>
            Gets or sets the size of the ScrollBarElement.
            </summary>
            <value>The size of the ScrollBarElement in pixels.</value>
            <remarks>Only the width can be set, the height is determined automatically.</remarks>
        </member>
        <member name="P:Miyagi.Controls.Elements.ScrollBarElement.Thumb">
            <summary>
            Gets or sets the thumb of the ScrollBarElement.
            </summary>
            <value>A ThumbElement representing the thumb of the ScrollBarElement.</value>
        </member>
        <member name="P:Miyagi.Controls.Elements.ScrollBarElement.Value">
            <summary>
            Gets or sets the value of the ScrollBarElement.
            </summary>
            <value>The value of the ScrollBarElement.</value>
        </member>
        <member name="P:Miyagi.Controls.Elements.ScrollBarElement.Width">
            <summary>
            Gets or sets the width of the ScrollBarElement.
            </summary>
            <value>The width of the ScrollBarElement in pixels.</value>
        </member>
        <member name="P:Miyagi.Controls.Elements.ScrollBarElement.SpriteBucket">
            <summary>
            Gets a list of sprites.
            </summary>
            <value>A list of sprites.</value>
        </member>
        <member name="P:Miyagi.Controls.Elements.ScrollBarElement.UpdateType">
            <summary>
            Gets or sets the UpdateType.
            </summary>
            <value>An UpdateType representing what should be changed when the element is updated.</value>
        </member>
        <member name="T:Miyagi.Serialization.LoadOrderAttribute">
            <summary>
            Determines the loading order of a property.
            </summary>
        </member>
        <member name="M:Miyagi.Serialization.LoadOrderAttribute.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the LoadOrderAttribute class.
            </summary>
            <param name="loadOrder">The loading order of a property. Maximum value is 2.</param>
        </member>
        <member name="P:Miyagi.Serialization.LoadOrderAttribute.Value">
            <summary>
            Gets or sets the loading order value.
            </summary>
            <value>The loading order value. Default is 0.</value>
        </member>
        <member name="T:Miyagi.Core.InputManager">
            <summary>
            An InputManager.
            </summary>
        </member>
        <member name="M:Miyagi.Core.InputManager.#ctor(Miyagi.Core.GuiManager,MOIS.Mouse,MOIS.Keyboard)">
            <summary>
            Initializes a new instance of the InputManager class.
            </summary>
            <param name="guiMgr">The GuiManager.</param>
            <param name="mouse">The Mois Mouse whose events are subscribed to.</param>
            <param name="keyboard">The Mois Keyboard whose events are subscribed to.</param>
        </member>
        <member name="M:Miyagi.Core.InputManager.Capture">
            <summary>
            Captures the input devices.
            </summary>
        </member>
        <member name="M:Miyagi.Core.InputManager.Dispose">
            <summary>
            Releases the unmanaged resources used by the InputManager.
            </summary>
        </member>
        <member name="M:Miyagi.Core.InputManager.InjectKeyPressed(MOIS.KeyEvent)">
            <summary>
            Injects a pressed key.
            </summary>
            <param name="arg">The MOIS.KeyEvent.</param>
            <returns>Always returns true.</returns>
        </member>
        <member name="M:Miyagi.Core.InputManager.InjectKeyPressed(Miyagi.Controls.Events.KeyEvent)">
            <summary>
            Injects a pressed key.
            </summary>
            <param name="arg">The KeyEvent.</param>
        </member>
        <member name="M:Miyagi.Core.InputManager.InjectKeyReleased(MOIS.KeyEvent)">
            <summary>
            Injects a released key.
            </summary>
            <param name="arg">The MOIS.KeyEvent.</param>
            <returns>Always returns true.</returns>
        </member>
        <member name="M:Miyagi.Core.InputManager.InjectKeyReleased(Miyagi.Controls.Events.KeyEvent)">
            <summary>
            Injects a released key.
            </summary>
            <param name="arg">The KeyEvent.</param>
        </member>
        <member name="M:Miyagi.Core.InputManager.InjectMouseMoved(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Injects mouse movement.
            </summary>
            <param name="x">The new mouse x-position.</param>
            <param name="y">The new mouse y-position.</param>
            <param name="isButtonDown">Indicates wheter a mouse button is pressed.</param>
            <remarks>Don't use this if you have specified a Mois Mouse on initialization.</remarks>
        </member>
        <member name="M:Miyagi.Core.InputManager.InjectMouseMoved(MOIS.MouseEvent)">
            <summary>
            Injects mouse movement.
            </summary>
            <param name="arg">The MOIS MouseEvent.</param>
            <remarks>Don't use this if you have specified a Mois Mouse on initialization.</remarks>
            <returns>Always returns true.</returns>
        </member>
        <member name="M:Miyagi.Core.InputManager.InjectMousePressed(Miyagi.Core.MouseButton)">
            <summary>
            Injects a pressed mouse button.
            </summary>
            <param name="mb">The mouse button.</param>
            <remarks>Don't use this if you have specified a Mois Mouse on initialization.</remarks>
        </member>
        <member name="M:Miyagi.Core.InputManager.InjectMousePressed(MOIS.MouseEvent,MOIS.MouseButtonID)">
            <summary>
            Injects a pressed mouse button.
            </summary>
            <param name="arg">The MOIS MouseEvent.</param>
            <param name="id">The MOIS MouseButtonID.</param>
            <remarks>Don't use this if you have specified a Mois Mouse on initialization.</remarks>
            <returns>Always returns true.</returns>
        </member>
        <member name="M:Miyagi.Core.InputManager.InjectMouseReleased(Miyagi.Core.MouseButton)">
            <summary>
            Injects a released mouse button.
            </summary>
            <param name="mb">The mouse button.</param>
            <remarks>Don't use this if you have specified a Mois Mouse on initialization.</remarks>
        </member>
        <member name="M:Miyagi.Core.InputManager.InjectMouseReleased(MOIS.MouseEvent,MOIS.MouseButtonID)">
            <summary>
            Injects a released mouse button.
            </summary>
            <param name="arg">The MOIS MouseEvent.</param>
            <param name="id">The MOIS MouseButtonID.</param>
            <remarks>Don't use this if you have specified a Mois Mouse on initialization.</remarks>
            <returns>Always returns true.</returns>
        </member>
        <member name="P:Miyagi.Core.InputManager.FocusedControl">
            <summary>
            Gets or sets the focused control.
            </summary>
            <value>The control which currently has the focus.</value>
        </member>
        <member name="P:Miyagi.Core.InputManager.GrabbedControl">
            <summary>
            Gets or sets the control which is currently grabbed by the mouse.
            </summary>
            <value>The control which is currently grabbed by the mouse.</value>
        </member>
        <member name="P:Miyagi.Core.InputManager.GrabbingMouseButton">
            <summary>
            Gets or sets the default MouseButton for grabbing a control.
            </summary>
            <value>The default MouseButton for grabbing a control. Default is MouseButtonID.MB_Left.</value>
        </member>
        <member name="P:Miyagi.Core.InputManager.Keyboard">
            <summary>
            Gets or sets the Mois Keyboard whose events are subscribed to.
            </summary>
            <value>The Mois keyboard.</value>
        </member>
        <member name="P:Miyagi.Core.InputManager.Mouse">
            <summary>
            Gets or sets the Mois Mouse whose events are subscribed to.
            </summary>
            <value>The Mois mouse.</value>
        </member>
        <member name="P:Miyagi.Core.InputManager.MouseDoubleClickSpeed">
            <summary>
            Gets or sets the threshold for recognising mouse double-clicks in milliseconds.
            </summary>
            <value>The threshold in milliseconds. Default is 500.</value>
        </member>
        <member name="P:Miyagi.Core.InputManager.MousePosition">
            <summary>
            Gets the position of the mouse.
            </summary>
            <value>The position of the mouse.</value>
        </member>
        <member name="P:Miyagi.Core.InputManager.MouseX">
            <summary>
            Gets the x-coordinate of the mouse.
            </summary>
            <value>An int representing the x-coordinate of the mouse.</value>
        </member>
        <member name="P:Miyagi.Core.InputManager.MouseY">
            <summary>
            Gets the y-coodinate of the mouse.
            </summary>
            <value>An int representing the y-coordinate of the mouse.</value>
        </member>
        <member name="P:Miyagi.Core.InputManager.RotatingMouseButton">
            <summary>
            Gets or sets the default MouseButton for rotating a mesh.
            </summary>
            <value>The default MouseButton for rotating a MeshElement. Default is MouseButtonID.MB_Right.</value>
        </member>
        <member name="T:Miyagi.Controls.DropDownList">
            <summary>
            A DropDownList control.
            </summary>
        </member>
        <member name="T:Miyagi.Controls.ListBox">
            <summary>
            A ListBox control.
            </summary>
        </member>
        <member name="M:Miyagi.Controls.ListBox.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ListBox class.
            </summary>
            <param name="name">The name of the ListBox.</param>
        </member>
        <member name="M:Miyagi.Controls.ListBox.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the ListBox class.
            </summary>
            <param name="name">The name of the ListBox.</param>
            <param name="material">The material of the ListBox.</param>
        </member>
        <member name="M:Miyagi.Controls.ListBox.#ctor(System.String,System.String,Miyagi.Core.Size)">
            <summary>
            Initializes a new instance of the ListBox class.
            </summary>
            <param name="name">The name of the ListBox.</param>
            <param name="material">The material of the ListBox.</param>
            <param name="size">The size of the ListBox.</param>
        </member>
        <member name="M:Miyagi.Controls.ListBox.#ctor(System.String,System.String,Miyagi.Core.Size,Miyagi.Core.Position)">
            <summary>
            Initializes a new instance of the ListBox class.
            </summary>
            <param name="name">The name of the ListBox.</param>
            <param name="material">The material of the ListBox.</param>
            <param name="size">The size of the ListBox.</param>
            <param name="position">The position of the ListBox.</param>
        </member>
        <member name="M:Miyagi.Controls.ListBox.#ctor(System.Xml.XmlNode)">
            <summary>
            Initializes a new instance of the ListBox class from Xml.
            </summary>
            <param name="node">The XmlNode to read from.</param>
        </member>
        <member name="M:Miyagi.Controls.ListBox.ResetPositionAndSize">
            <summary>
            Resets the position and size of the control.
            </summary>
        </member>
        <member name="M:Miyagi.Controls.ListBox.OnKeyPressed(Miyagi.Controls.Events.KeyEvent)">
            <summary>
            Handles key presses.
            </summary>
            <param name="arg">The KeyEvent.</param>
        </member>
        <member name="M:Miyagi.Controls.ListBox.OnMouseDrag(System.Int32,System.Int32)">
            <summary>
            Handles mouse drags.
            </summary>
            <param name="x">The x-coordinate.</param>
            <param name="y">The y-coordinate.</param>
        </member>
        <member name="M:Miyagi.Controls.ListBox.OnMouseHover">
            <summary>
            Handles mouse hover events.
            </summary>
        </member>
        <member name="M:Miyagi.Controls.ListBox.OnMouseLeave">
            <summary>
            Handles mouse leave events.
            </summary>
        </member>
        <member name="M:Miyagi.Controls.ListBox.OnMousePressed(Miyagi.Core.MouseButton)">
            <summary>
            Handles mouse press events.
            </summary>
            <param name="mb">The mouse button.</param>
        </member>
        <member name="M:Miyagi.Controls.ListBox.OnMouseWheelMoved(System.Int32)">
            <summary>
            Handles mouse wheel events.
            </summary>
            <param name="z">The mouse wheel value.</param>
        </member>
        <member name="M:Miyagi.Controls.ListBox.Update">
            <summary>
            Updates the control.
            </summary>
        </member>
        <member name="M:Miyagi.Controls.ListBox.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the control.
            </summary>
            <param name="disposing">Whether Dispose has been called.</param>
        </member>
        <member name="M:Miyagi.Controls.ListBox.FillListBox">
            <summary>
            Initializes the ListBox.
            </summary>
        </member>
        <member name="M:Miyagi.Controls.ListBox.GetItemPosition(System.Int32)">
            <summary>
            Gets the position of an item by index.
            </summary>
            <param name="index">The index of the item.</param>
            <returns>The position of the item.</returns>
        </member>
        <member name="M:Miyagi.Controls.ListBox.OnSizeChanged(Miyagi.Core.Size,Miyagi.Core.Size)">
            <summary>
            Handles size changes.
            </summary>
            <param name="oldSize">The old size.</param>
            <param name="newSize">The new size.</param>
        </member>
        <member name="M:Miyagi.Controls.ListBox.SerializeCollections(System.Xml.XmlTextWriter)">
            <summary>
            Serialize the collections of a control to Xml.
            </summary>
            <param name="xtw">The XmlTextWriter.</param>
        </member>
        <member name="E:Miyagi.Controls.ListBox.ItemAdded">
            <summary>
            Occurs when an item is added to the collection.
            </summary>
            <remarks>Submits the added item.</remarks>
        </member>
        <member name="E:Miyagi.Controls.ListBox.ItemRemoved">
            <summary>
            Occurs when an item is removed from the collection.
            </summary>
            <remarks>Submits the removed item.</remarks>
        </member>
        <member name="E:Miyagi.Controls.ListBox.SelectedItemIndexChanged">
            <summary>
            Occurs when the SelectedItemIndex property is changed.
            </summary>
            <remarks>Submits the index.</remarks>
        </member>
        <member name="P:Miyagi.Controls.ListBox.Items">
            <summary>
            Gets the collection of items.
            </summary>
            <value>A collection of items.</value>
        </member>
        <member name="P:Miyagi.Controls.ListBox.NumVisibleItems">
            <summary>
            Gets the count of visible items.
            </summary>
            <value>The count of visible items.</value>
        </member>
        <member name="P:Miyagi.Controls.ListBox.ScrollBar">
            <summary>
            Gets or sets the ScrollBar.
            </summary>
            <value>A ScrollBarElement.</value>
        </member>
        <member name="P:Miyagi.Controls.ListBox.SelectedIndex">
            <summary>
            Gets or sets the index of the selected item.
            </summary>
            <value>The index of the selected item. Returns -1 if no item is selected.</value>
        </member>
        <member name="P:Miyagi.Controls.ListBox.SelectedItem">
            <summary>
            Gets or sets the selected item.
            </summary>
            <value>A ListBoxItemElement representing the selected item. Returns null, if no item is selected.</value>
        </member>
        <member name="P:Miyagi.Controls.ListBox.TopItemIndex">
            <summary>
            Gets or sets the index of the first item in the list.
            </summary>
            <value>The index of the first item.</value>
        </member>
        <member name="P:Miyagi.Controls.ListBox.AreColoursDirty">
            <summary>
            Gets or sets a value indicating whether the colours of the items need to be updated.
            </summary>
            <value>True if a update is needed, otherwise false.</value>
        </member>
        <member name="P:Miyagi.Controls.ListBox.ItemFixedVerticalOffset">
            <summary>
            Gets the fixed vertical item offset.
            </summary>
            <value>An int representing the fixed vertical item offset.</value>
        </member>
        <member name="P:Miyagi.Controls.ListBox.ItemTotalAvailableHeight">
            <summary>
            Gets the total height available for items.
            </summary>
            <value>An int representing the total height available for items.</value>
        </member>
        <member name="P:Miyagi.Controls.ListBox.NeedsUpdate">
            <summary>
            Gets or sets a value indicating whether the items need to be updated.
            </summary>
            <value>True if a update is needed, otherwise false.</value>
        </member>
        <member name="P:Miyagi.Controls.ListBox.ElementBucket">
            <summary>
            Gets a list of elements.
            </summary>
            <value>A list of elements.</value>
        </member>
        <member name="P:Miyagi.Controls.ListBox.VisibleItems">
            <summary>
            Gets or sets a list of visible items.
            </summary>
            <value>A list of visible items.</value>
        </member>
        <member name="M:Miyagi.Controls.DropDownList.#ctor(System.String)">
            <summary>
            Initializes a new instance of the DropDownList class.
            </summary>
            <param name="name">The name of the DropDownList.</param>
        </member>
        <member name="M:Miyagi.Controls.DropDownList.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the DropDownList class.
            </summary>
            <param name="name">The name of the DropDownList.</param>
            <param name="material">The material of the DropDownList.</param>
        </member>
        <member name="M:Miyagi.Controls.DropDownList.#ctor(System.String,System.String,Miyagi.Core.Size)">
            <summary>
            Initializes a new instance of the DropDownList class.
            </summary>
            <param name="name">The name of the DropDownList.</param>
            <param name="material">The material of the DropDownList.</param>
            <param name="size">The size of the DropDownList.</param>
        </member>
        <member name="M:Miyagi.Controls.DropDownList.#ctor(System.String,System.String,Miyagi.Core.Size,Miyagi.Core.Position)">
            <summary>
            Initializes a new instance of the DropDownList class.
            </summary>
            <param name="name">The name of the DropDownList.</param>
            <param name="material">The material of the DropDownList.</param>
            <param name="size">The size of the DropDownList.</param>
            <param name="position">The position of the DropDownList.</param>
        </member>
        <member name="M:Miyagi.Controls.DropDownList.#ctor(System.Xml.XmlNode)">
            <summary>
            Initializes a new instance of the DropDownList class from Xml.
            </summary>
            <param name="node">The XmlNode to read from.</param>
        </member>
        <member name="M:Miyagi.Controls.DropDownList.OnMousePressed(Miyagi.Core.MouseButton)">
            <summary>
            Handles mouse press events.
            </summary>
            <param name="mb">The mouse button.</param>
        </member>
        <member name="M:Miyagi.Controls.DropDownList.OnMouseWheelMoved(System.Int32)">
            <summary>
            Handles mouse wheel events.
            </summary>
            <param name="z">The mouse wheel value.</param>
        </member>
        <member name="M:Miyagi.Controls.DropDownList.Update">
            <summary>
            Updates the control.
            </summary>
        </member>
        <member name="M:Miyagi.Controls.DropDownList.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the control.
            </summary>
            <param name="disposing">Whether Dispose has been called.</param>
        </member>
        <member name="M:Miyagi.Controls.DropDownList.OnLostFocus">
            <summary>
            Handles losing the focus.
            </summary>
        </member>
        <member name="M:Miyagi.Controls.DropDownList.OnMaterialSchemeChanged(Miyagi.Core.MaterialScheme)">
            <summary>
            Handles material changes.
            </summary>
            <param name="material">The new material.</param>
        </member>
        <member name="M:Miyagi.Controls.DropDownList.OnSizeChanged(Miyagi.Core.Size,Miyagi.Core.Size)">
            <summary>
            Handles size changes.
            </summary>
            <param name="oldSize">The old size.</param>
            <param name="newSize">The new size.</param>
        </member>
        <member name="P:Miyagi.Controls.DropDownList.DerivedRectangle">
            <summary>
            Gets the derived Rectangle of the control.
            </summary>
            <value>The DoubleRect that represents the derived position and size of the control in relative coordinates.</value>
        </member>
        <member name="P:Miyagi.Controls.DropDownList.DropDownListSize">
            <summary>
            Gets or sets the size of the drop-down list.
            </summary>
            <value>The size of the drop-down list in pixels. Default is 'width' and 'height' * 5 parameters of the constructor.</value>
        </member>
        <member name="P:Miyagi.Controls.DropDownList.ItemFixedVerticalOffset">
            <summary>
            Gets the fixed vertical item offset.
            </summary>
            <value>An int representing the fixed vertical item offset.</value>
        </member>
        <member name="P:Miyagi.Controls.DropDownList.ItemTotalAvailableHeight">
            <summary>
            Gets the total height available for items.
            </summary>
            <value>An int representing the total height available for items.</value>
        </member>
        <member name="P:Miyagi.Controls.DropDownList.ElementBucket">
            <summary>
            Gets a list of elements.
            </summary>
            <value>A list of elements.</value>
        </member>
        <member name="T:Miyagi.Controls.Events.DragDropEventArgs">
            <summary>
            EventArgs for DragDrop event.
            </summary>
        </member>
        <member name="M:Miyagi.Controls.Events.DragDropEventArgs.#ctor(Miyagi.Controls.BaseControl)">
            <summary>
            Initializes a new instance of the DragDropEventArgs class.
            </summary>
            <param name="droppedControl">The dropped control.</param>
        </member>
        <member name="P:Miyagi.Controls.Events.DragDropEventArgs.DroppedControl">
            <summary>
            Gets the dropped control.
            </summary>
            <value>A BaseControl representing the dropped Control.</value>
        </member>
        <member name="T:Miyagi.Serialization.IgnoreAttribute">
            <summary>
            Indicates that the Serializer should ignore a property.
            </summary>
        </member>
        <member name="T:Miyagi.Controls.Elements.ThumbElement">
            <summary>
            An element for displaying a thumb.
            </summary>
        </member>
        <member name="M:Miyagi.Controls.Elements.ThumbElement.#ctor">
            <summary>
            Initializes a new instance of the ThumbElement class.
            </summary>
        </member>
        <member name="M:Miyagi.Controls.Elements.ThumbElement.Serialize(System.Xml.XmlTextWriter)">
            <summary>
            Serializes the ThumbElement to Xml.
            </summary>
            <param name="xtw">The XmlTextWriter.</param>
        </member>
        <member name="M:Miyagi.Controls.Elements.ThumbElement.ApplyOpacity">
            <summary>
            Applies the opacity.
            </summary>
        </member>
        <member name="M:Miyagi.Controls.Elements.ThumbElement.ApplyTextureFiltering">
            <summary>
            Applies the TextureFiltering.
            </summary>
        </member>
        <member name="M:Miyagi.Controls.Elements.ThumbElement.ApplyVisibility">
            <summary>
            Applies the visibility.
            </summary>
        </member>
        <member name="M:Miyagi.Controls.Elements.ThumbElement.GetZOrder">
            <summary>
            Gets the ZOrder.
            </summary>
            <returns>An int representing the zorder.</returns>
        </member>
        <member name="M:Miyagi.Controls.Elements.ThumbElement.HitTest(System.Int32,System.Int32)">
            <summary>
            Performs a hit test.
            </summary>
            <param name="x">The x-coordinate.</param>
            <param name="y">The y-coordinate.</param>
            <returns>True if the Sprite is hit, otherwise false.</returns>
        </member>
        <member name="M:Miyagi.Controls.Elements.ThumbElement.Move(Mogre.Vector3)">
            <summary>
            Moves the sprites of the element.
            </summary>
            <param name="diff">The distance to move.</param>
        </member>
        <member name="M:Miyagi.Controls.Elements.ThumbElement.RemoveSprites">
            <summary>
            Removes the sprites.
            </summary>
        </member>
        <member name="M:Miyagi.Controls.Elements.ThumbElement.Update">
            <summary>
            Updates the element.
            </summary>
        </member>
        <member name="M:Miyagi.Controls.Elements.ThumbElement.GetOwner">
            <summary>
            Gets the owner.
            </summary>
            <returns>An IElementOwner representing the owner of the element.</returns>
        </member>
        <member name="P:Miyagi.Controls.Elements.ThumbElement.AutoSize">
            <summary>
            Gets or sets a value indicating whether the thumb should be resized according to the Min and Max values.
            </summary>
            <value>If set to true, the thumb resizes if Max or Min has changed. Default is false.</value>
        </member>
        <member name="P:Miyagi.Controls.Elements.ThumbElement.Border">
            <summary>
            Gets or sets the border.
            </summary>
            <value>A BorderElement representing the border of the thumb.</value>
        </member>
        <member name="P:Miyagi.Controls.Elements.ThumbElement.Orientation">
            <summary>
            Gets or sets the orientation of the ProgressBar.
            </summary>
            <value>The orientation.</value>
        </member>
        <member name="P:Miyagi.Controls.Elements.ThumbElement.Position">
            <summary>
            Gets the position of the ThumbElement.
            </summary>
            <value>A Position representing the position of the ThumbElement.</value>
        </member>
        <member name="P:Miyagi.Controls.Elements.ThumbElement.Size">
            <summary>
            Gets or sets the height of the thumb.
            </summary>
            <value>The height in pixels.</value>
        </member>
        <member name="P:Miyagi.Controls.Elements.ThumbElement.SpriteBucket">
            <summary>
            Gets a list of sprites.
            </summary>
            <value>A list of sprites.</value>
        </member>
        <member name="P:Miyagi.Controls.Elements.ThumbElement.UpdateType">
            <summary>
            Gets or sets the UpdateType.
            </summary>
            <value>An UpdateType representing what should be changed when the element is updated.</value>
        </member>
        <member name="T:Miyagi.Collections.GuiCollection">
            <summary>
            A custom collection of guis.
            </summary>
        </member>
        <member name="M:Miyagi.Collections.GuiCollection.Add(Miyagi.Core.Gui)">
            <summary>
            Adds a new gui to the collection.
            </summary>
            <param name="item">The new gui.</param>
        </member>
        <member name="E:Miyagi.Collections.GuiCollection.GuiAdded">
            <summary>
            Occurs when a new gui is added.
            </summary>
        </member>
        <member name="T:Miyagi.Plugin.CodeProviderScriptingPlugin">
            <summary>
            An abstract base class for ScriptingPlugins which use a CodeDomProvider.
            </summary>
        </member>
        <member name="M:Miyagi.Plugin.CodeProviderScriptingPlugin.#ctor(Miyagi.Core.GuiManager)">
            <summary>
            Initializes a new instance of the CodeProviderScriptingPlugin class.
            </summary>
            <param name="guiMgr">The GuiManager.</param>
        </member>
        <member name="M:Miyagi.Plugin.CodeProviderScriptingPlugin.BindEvents(Miyagi.Controls.Events.EventScriptingScheme)">
            <summary>
            Binds the events.
            </summary>
            <param name="scheme">The EventScriptingScheme.</param>
        </member>
        <member name="M:Miyagi.Plugin.CodeProviderScriptingPlugin.OnPluginUnloaded">
            <summary>
            Is called when the plugin is unloaded.
            </summary>
        </member>
        <member name="M:Miyagi.Plugin.CodeProviderScriptingPlugin.CreateAssembly(Miyagi.Controls.Events.EventScriptingScheme)">
            <summary>
            Creates an assembly.
            </summary>
            <param name="def">The EventScriptingScheme.</param>
            <returns>The newly created assembly.</returns>
        </member>
        <member name="M:Miyagi.Plugin.CodeProviderScriptingPlugin.CreateAssembly(Miyagi.Controls.Events.EventScriptingScheme,System.CodeDom.Compiler.CodeDomProvider,System.CodeDom.Compiler.CompilerParameters)">
            <summary>
            Creates an assembly.
            </summary>
            <param name="def">The EventScriptingScheme.</param>
            <param name="provider">The CodeDomProvider.</param>
            <param name="cp">The CompilerParameters.</param>
            <returns>The newly created assembly.</returns>
        </member>
        <member name="P:Miyagi.Plugin.CodeProviderScriptingPlugin.Assemblies">
            <summary>
            Gets a Dictionary of created assemblies.
            </summary>
            <value>A Dictionary of created assemblies.</value>
        </member>
        <member name="T:Miyagi.Controls.Elements.TextElement">
            <summary>
            An element for displaying text.
            </summary>
        </member>
        <member name="M:Miyagi.Controls.Elements.TextElement.#ctor">
            <summary>
            Initializes a new instance of the TextElement class.
            </summary>
        </member>
        <member name="M:Miyagi.Controls.Elements.TextElement.#ctor(System.Xml.XmlNode)">
            <summary>
            Initializes a new instance of the TextElement class from Xml.
            </summary>
            <param name="node">The XmlNode to read from.</param>
        </member>
        <member name="M:Miyagi.Controls.Elements.TextElement.op_Explicit(Miyagi.Controls.Elements.TextElement)~System.String">
            <summary>
            Converts a instance of TextElement in a new instance of string.
            </summary>
            <param name="te">The TextElement to convert.</param>
            <returns>A string representing the TextElement.</returns>
        </member>
        <member name="M:Miyagi.Controls.Elements.TextElement.op_Implicit(System.String)~Miyagi.Controls.Elements.TextElement">
            <summary>
            Converts a instance of string in a new instance of TextElement.
            </summary>
            <param name="s">The string to convert.</param>
            <returns>A string representing the TextElement.</returns>
        </member>
        <member name="M:Miyagi.Controls.Elements.TextElement.Serialize(System.Xml.XmlTextWriter)">
            <summary>
            Serializes the TextElement to Xml.
            </summary>
            <param name="xtw">The XmlTextWriter.</param>
        </member>
        <member name="M:Miyagi.Controls.Elements.TextElement.ApplyTextureFiltering">
            <summary>
            Applies the TextureFiltering.
            </summary>
        </member>
        <member name="M:Miyagi.Controls.Elements.TextElement.ApplyZOrder">
            <summary>
            Applies the ZOrder.
            </summary>
        </member>
        <member name="M:Miyagi.Controls.Elements.TextElement.GetZOrder">
            <summary>
            Gets the ZOrder.
            </summary>
            <returns>An int representing the zorder.</returns>
        </member>
        <member name="M:Miyagi.Controls.Elements.TextElement.RemoveSprites">
            <summary>
            Removes the sprites.
            </summary>
        </member>
        <member name="M:Miyagi.Controls.Elements.TextElement.Update">
            <summary>
            Updates the element.
            </summary>
        </member>
        <member name="M:Miyagi.Controls.Elements.TextElement.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the element.
            </summary>
            <param name="disposing">Whether Dispose has been called.</param>
        </member>
        <member name="M:Miyagi.Controls.Elements.TextElement.GetOwner">
            <summary>
            Gets the owner.
            </summary>
            <returns>An IElementOwner representing the owner of the element.</returns>
        </member>
        <member name="M:Miyagi.Controls.Elements.TextElement.OnTextChanged(System.String)">
            <summary>
            Handles text changes.
            </summary>
            <param name="newText">The new text.</param>
        </member>
        <member name="M:Miyagi.Controls.Elements.TextElement.OnTextSchemeChanged(Miyagi.Core.TextScheme)">
            <summary>
            Handles TextScheme changes.
            </summary>
            <param name="textScheme">The new TextScheme.</param>
        </member>
        <member name="P:Miyagi.Controls.Elements.TextElement.Alignment">
            <summary>
            Gets or sets the alignment of the text.
            </summary>
            <value>The alignment of the text.</value>
        </member>
        <member name="P:Miyagi.Controls.Elements.TextElement.AreaSize">
            <summary>
            Gets or sets the size available for the text.
            </summary>
            <value>The size available of the text.</value>
        </member>
        <member name="P:Miyagi.Controls.Elements.TextElement.Multiline">
            <summary>
            Gets or sets a value indicating whether the TextElement can extend more than one line.
            </summary>
            <value>True if the the TextElement can extend more than one line, otherwise false.</value>
        </member>
        <member name="P:Miyagi.Controls.Elements.TextElement.Offset">
            <summary>
            Gets or sets the offset of the text.
            </summary>
            <value>The offset of the text.</value>
        </member>
        <member name="P:Miyagi.Controls.Elements.TextElement.TextScheme">
            <summary>
            Gets or sets the TextScheme of the the.
            </summary>
            <value>A TextScheme.</value>
        </member>
        <member name="P:Miyagi.Controls.Elements.TextElement.TextSchemeName">
            <summary>
            Gets or sets the name of the TextScheme assigned to the control.
            </summary>
            <value>A string representing the name of the TextScheme.</value>
        </member>
        <member name="P:Miyagi.Controls.Elements.TextElement.Value">
            <summary>
            Gets or sets the text of the control.
            </summary>
            <value>A string representing the text of the control.</value>
        </member>
        <member name="P:Miyagi.Controls.Elements.TextElement.Colour">
            <summary>
            Gets or sets the colour of the text.
            </summary>
        </member>
        <member name="T:Miyagi.Rendering.Sprite">
            <summary>
            A representation of a Sprite.
            </summary>
        </member>
        <member name="M:Miyagi.Rendering.Sprite.#ctor(Miyagi.Controls.BaseControl)">
            <summary>
            Initializes a new instance of the Sprite class.
            </summary>
            <param name="owner">The owner of the Sprite.</param>
        </member>
        <member name="M:Miyagi.Rendering.Sprite.ForEach(System.Action{Miyagi.Rendering.Quad})">
            <summary>
            Executes an action for each Quad.
            </summary>
            <param name="action">The action to perform.</param>
        </member>
        <member name="M:Miyagi.Rendering.Sprite.GetQuad(System.Int32)">
            <summary>
            Gets the Quad at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>The Quad at the specified index.</returns>
        </member>
        <member name="M:Miyagi.Rendering.Sprite.OnPostRender">
            <summary>
            Is called after the Sprite has been rendered.
            </summary>
        </member>
        <member name="M:Miyagi.Rendering.Sprite.OnPreRender">
            <summary>
            Is called before the Sprite has been rendered.
            </summary>
        </member>
        <member name="M:Miyagi.Rendering.Sprite.SetProperties(System.Boolean,System.Single,System.Int32,Miyagi.Core.TextureFiltering)">
            <summary>
            Adds sprites to the Renderer.
            </summary>
            <param name="visibility">The visibility of the sprites.</param>
            <param name="opacity">The opacity of the sprites.</param>
            <param name="zorder">The zorder of the sprites.</param>
            <param name="filtering">The texture filtering of the sprites.</param>
        </member>
        <member name="M:Miyagi.Rendering.Sprite.SetQuads(Miyagi.Rendering.Quad[])">
            <summary>
            Sets the Quads.
            </summary>
            <param name="quads">The new Quads.</param>
        </member>
        <member name="M:Miyagi.Rendering.Sprite.SetTexture(System.String)">
            <summary>
            Sets the texture of the Sprite.
            </summary>
            <param name="texName">The name of the texture.</param>
        </member>
        <member name="E:Miyagi.Rendering.Sprite.PostRender">
            <summary>
            Occurs after the Sprite has been rendered.
            </summary>
        </member>
        <member name="E:Miyagi.Rendering.Sprite.PreRender">
            <summary>
            Occurs before the Sprite has been rendered.
            </summary>
        </member>
        <member name="P:Miyagi.Rendering.Sprite.HasEventSubscriptions">
            <summary>
            Gets a value indicating whether the events of this Sprite have subscribers.
            </summary>
            <value>True if the events of this Sprite have subscribers, otherwise false.</value>
        </member>
        <member name="P:Miyagi.Rendering.Sprite.Opacity">
            <summary>
            Gets or sets the opacity of the Sprite.
            </summary>
            <value>A float representing the opacity of the Sprite.</value>
        </member>
        <member name="P:Miyagi.Rendering.Sprite.QuadCount">
            <summary>
            Gets the number of quads.
            </summary>
            <value>An int representing the number of Quads.</value>
        </member>
        <member name="P:Miyagi.Rendering.Sprite.TexFilter">
            <summary>
            Gets or sets the texture filtering of the Sprite.
            </summary>
            <value>A TextureFiltering enum representing the texture filtering of the Sprite.</value>
        </member>
        <member name="P:Miyagi.Rendering.Sprite.TexHandle">
            <summary>
            Gets or sets the texture handle of the Sprite.
            </summary>
            <value>An int representing the texture handle of the Sprite.</value>
        </member>
        <member name="P:Miyagi.Rendering.Sprite.Visible">
            <summary>
            Gets or sets a value indicating whether the Sprite is visible.
            </summary>
            <value>True if visible, otherwise false.</value>
        </member>
        <member name="P:Miyagi.Rendering.Sprite.ZOrder">
            <summary>
            Gets or sets the ZOrder of the Sprite.
            </summary>
            <value>An int representing the ZOrder of the Sprite.</value>
            <remarks>In order for changes to take effect, <see cref="M:Miyagi.Rendering.SpriteRenderer.SortSprites"/> of the responsible <see cref="T:Miyagi.Rendering.SpriteRenderer"/> has to be called.</remarks>
        </member>
        <member name="T:Miyagi.Rendering.Sprite.Comparer">
            <summary>
            Comparer for Sprites.
            </summary>
        </member>
        <member name="T:Miyagi.Core.GuiManager">
            <summary>
            Manages the GUIs and registers the mouse and keyboard events.
            </summary>
        </member>
        <member name="M:Miyagi.Core.GuiManager.AddOrphanControls(Miyagi.Collections.ControlCollection)">
            <summary>
            Adds controls which are currently not added to a GUI or control to a ControlCollection.
            </summary>
            <param name="controlCollection">The ControlCollection the controls should be added to.</param>
        </member>
        <member name="M:Miyagi.Core.GuiManager.BindAllEventMethods">
            <summary>
            Binds all events according to the EventScriptingSchemes.
            </summary>
        </member>
        <member name="M:Miyagi.Core.GuiManager.CreateControl``1(System.String,Miyagi.Core.Size,Miyagi.Core.Position,Miyagi.Collections.ControlCollection)">
            <summary>
            Creates a new control and adds it to a ControlCollection.
            </summary>
            <param name="name">The name of the control.</param>
            <param name="size">The size of the control.</param>
            <param name="position">The position of the control.</param>
            <param name="controlCollection">The ControlCollection the control should be added to.</param>
            <returns>The newly created control, or null when trying to create a instance of an abstract control class.</returns>
            <typeparam name="T">The type of the control.</typeparam>
        </member>
        <member name="M:Miyagi.Core.GuiManager.CreateCursor(System.String,Miyagi.Core.Size,Miyagi.Core.Position)">
            <summary>
            Creates a new cursor and sets it as the active one.
            </summary>
            <param name="material">The cursor material.</param>
            <param name="size">The size of the cursor.</param>
            <param name="hotspotPosition">The position of the cursor's main hotspot.</param>
        </member>
        <member name="M:Miyagi.Core.GuiManager.CreateEventScriptingScheme(System.String)">
            <summary>
            Creates a new EventScriptingScheme a add it to the EventScriptingScheme collection.
            </summary>
            <param name="name">The name of the EventScriptingScheme.</param>
            <returns>The newly created EventScriptingScheme.</returns>
        </member>
        <member name="M:Miyagi.Core.GuiManager.CreateGui(System.String)">
            <summary>
            Creates a new GUI and adds it to the GUI collection.
            </summary>
            <param name="name">The name of the GUI.</param>
            <returns>The newly created GUI.</returns>
        </member>
        <member name="M:Miyagi.Core.GuiManager.CreateMaterialScheme(System.String,System.Type,System.String,System.Boolean)">
            <summary>
            Creates a new MaterialScheme and adds it to the MaterialScheme collection.
            </summary>
            <param name="name">The name of the MaterialScheme.</param>
            <param name="materialType">The type of the material.</param>
            <param name="fileName">The filename of the texture of the base material.</param>
            <param name="preLoad">Indicates whether the texture files should be preloaded.</param>
            <returns>The newly created MaterialScheme.</returns>
        </member>
        <member name="M:Miyagi.Core.GuiManager.CreateTextScheme(System.String,System.String,System.Int32,System.Int32,Mogre.ColourValue)">
            <summary>
            Creates a new TextScheme for a TrueType font and adds it to the TextScheme collection.
            </summary>
            <param name="name">The name of the TextScheme.</param>
            <param name="font">The filename of the font of the TextScheme.</param>
            <param name="size">The size of the font.</param>
            <param name="resolution">The resolution of the font.</param>
            <param name="colour">The colour of the TextScheme.</param>
            <returns>The created TextScheme.</returns>
        </member>
        <member name="M:Miyagi.Core.GuiManager.Deserialize(System.Xml.XmlNode)">
            <summary>
            Deserializes GuiManager from an XmlNode.
            </summary>
            <param name="node">The XmlNode.</param>
        </member>
        <member name="M:Miyagi.Core.GuiManager.Destroy">
            <summary>
            Destroys the GuiManager and disposes all components.
            </summary>
            <remarks>Oppose to <see cref="M:Miyagi.Core.GuiManager.Reset"/>, the GuiManger has to be initialized again after it has been destroyed.</remarks>
        </member>
        <member name="M:Miyagi.Core.GuiManager.DisposeAllGuis">
            <summary>
            Disposes all GUIs.
            </summary>
        </member>
        <member name="M:Miyagi.Core.GuiManager.DisposeControl(System.String)">
            <summary>
            Disposes a control by name.
            </summary>
            <param name="name">The name of the control.</param>
        </member>
        <member name="M:Miyagi.Core.GuiManager.DisposeGui(System.String)">
            <summary>
            Disposes a GUI by name.
            </summary>
            <param name="name">The name of the gui.</param>
        </member>
        <member name="M:Miyagi.Core.GuiManager.GetControl(System.String)">
            <summary>
            Gets a control by name.
            </summary>
            <param name="name">The name of the control.</param>
            <returns>The first control of that name if it exists, else null.</returns>
        </member>
        <member name="M:Miyagi.Core.GuiManager.GetControlByPath(System.String[])">
            <summary>
            Gets a control by path.
            </summary>
            <param name="path">The path of the control.</param>
            <returns>The first control with the specified path if it exists, else null.</returns>
            <example><code>Button b = (Button)GuiManager.Singleton.GetControl("Gui1", "Panel1", "Button1");</code></example>
        </member>
        <member name="M:Miyagi.Core.GuiManager.GetControlEnumerator">
            <summary>
            Exposes an enumerator for a simple iteration over all GUI controls.
            </summary>
            <returns>An enumerator for all gui controls.</returns>
        </member>
        <member name="M:Miyagi.Core.GuiManager.GetTopControl">
            <summary>
            Returns the topmost control under the mouse cursor.
            </summary>
            <returns>If there is a control under the cursor the topmost, else null.</returns>
        </member>
        <member name="M:Miyagi.Core.GuiManager.GetTopControlAt(Miyagi.Core.Position)">
            <summary>
            Returns the topmost control at the specified position.
            </summary>
            <param name="pos">The position where you want to look for a control.</param>
            <returns>If there is a control at the position the topmost, else null.</returns>
        </member>
        <member name="M:Miyagi.Core.GuiManager.GetTopControlAt(System.Int32,System.Int32)">
            <summary>
            Returns the topmost control at the specified position.
            </summary>
            <param name="x">The x-coordinate of the position where you want to look for a control.</param>
            <param name="y">The y-coordinate of the position where you want to look for a control.</param>
            <returns>If there is a control at the position the topmost, else null.</returns>
        </member>
        <member name="M:Miyagi.Core.GuiManager.GetTopGui">
            <summary>
            Returns the topmost GUI under the mouse cursor.
            </summary>
            <returns>If there is a GUI under the cursor the topmost, else null.</returns>
        </member>
        <member name="M:Miyagi.Core.GuiManager.GetTopGuiAt(System.Int32,System.Int32)">
            <summary>
            Returns the topmost GUI at the specified position.
            </summary>
            <param name="x">The x-coordinate of the position where you want to look for a GUI.</param>
            <param name="y">The y-coordinate of the position where you want to look for a GUI.</param>
            <returns>If there is a GUI at the position the topmost, else null.</returns>
        </member>
        <member name="M:Miyagi.Core.GuiManager.HideCursor">
            <summary>
            Hides the mouse cursor.
            </summary>
        </member>
        <member name="M:Miyagi.Core.GuiManager.Initialize(System.Boolean)">
            <summary>
            Initializes the GuiManager.
            </summary>
            <param name="suppressGuiLoad">Whether the import of .mgx files should be suppressed. Default is false.</param>
        </member>
        <member name="M:Miyagi.Core.GuiManager.Initialize(MOIS.Mouse,MOIS.Keyboard,System.Boolean)">
            <summary>
            Initializes the GuiManager.
            </summary>
            <param name="mouse">The Mois Mouse whose events are subscribed to.</param>
            <param name="keyboard">The Mois Keyboard whose events are subscribed to.</param>
            <param name="suppressGuiLoad">Whether the import of .mgx files should be suppressed. Default is false.</param>
        </member>
        <member name="M:Miyagi.Core.GuiManager.Reset">
            <summary>
            Resets the GuiManager and disposes all components.
            </summary>
        </member>
        <member name="M:Miyagi.Core.GuiManager.ResetPositionAndSize">
            <summary>
            Resets the position of all controls.
            </summary>
        </member>
        <member name="M:Miyagi.Core.GuiManager.Serialize(System.Xml.XmlTextWriter)">
            <summary>
            Serializes the GuiManager to an XmlTextWriter.
            </summary>
            <param name="xtw">The XmlTextWriter.</param>
        </member>
        <member name="M:Miyagi.Core.GuiManager.ShowCursor">
            <summary>
            Shows the mouse cursor.
            </summary>
        </member>
        <member name="M:Miyagi.Core.GuiManager.Update(System.Boolean)">
            <summary>
            Updates all GUIs.
            </summary>
            <param name="captureInput">Indicates whether the input devices should be captured.</param>
        </member>
        <member name="P:Miyagi.Core.GuiManager.Singleton">
            <summary>
            Gets the singleton instance of GuiManager.
            </summary>
            <value>The GuiManager singleton instance.</value>
        </member>
        <member name="P:Miyagi.Core.GuiManager.Camera">
            <summary>
            Gets or sets the Mogre camera on which GUIs are rendered.
            </summary>
            <value>The Mogre camera on which GUIs are rendered.</value>
            <remarks>Default is the first camera of the first SceneManager.</remarks>
        </member>
        <member name="P:Miyagi.Core.GuiManager.Cursor">
            <summary>
            Gets or sets the cursor.
            </summary>
            <value>The main cursor.</value>
        </member>
        <member name="P:Miyagi.Core.GuiManager.DefaultTextScheme">
            <summary>
            Gets or sets the default TextScheme.
            </summary>
            <value>The default TextScheme for all newly created controls.</value>
        </member>
        <member name="P:Miyagi.Core.GuiManager.DoScissorTest">
            <summary>
            Gets or sets a value indicating whether scissor tests will be performed.
            </summary>
            <value>If set to true, scissor tests will be performed. Default is false.</value>
            <remarks>Currently, this only limits the drawing area of Panels to their size. <br/> This is always false if the rendersytem is not capable of performing scissor tests.</remarks>
        </member>
        <member name="P:Miyagi.Core.GuiManager.EventScriptingScheme">
            <summary>
            Gets the collection of EventScriptingScheme.
            </summary>
            <value>The collection of EventScriptingScheme.</value>
        </member>
        <member name="P:Miyagi.Core.GuiManager.Guis">
            <summary>
            Gets the collection of GUIs.
            </summary>
            <value>A collection of GUIs.</value>
        </member>
        <member name="P:Miyagi.Core.GuiManager.InputManager">
            <summary>
            Gets the InputManager.
            </summary>
            <value>The InputManager.</value>
        </member>
        <member name="P:Miyagi.Core.GuiManager.MaterialSchemes">
            <summary>
            Gets the collection of MaterialSchemes.
            </summary>
            <value>The collection of MaterialSchemes.</value>
        </member>
        <member name="P:Miyagi.Core.GuiManager.PluginManager">
            <summary>
            Gets the PluginManager.
            </summary>
            <value>The PluginManager.</value>
        </member>
        <member name="P:Miyagi.Core.GuiManager.RenderManager">
            <summary>
            Gets the RenderManager.
            </summary>
            <value>The RenderManager.</value>
        </member>
        <member name="P:Miyagi.Core.GuiManager.ResourceGroupName">
            <summary>
            Gets or sets the name of the resource group.
            </summary>
            <value>A string representing the name of the resource group. Default is ResourceGroupManager.DEFAULT_RESOURCE_GROUP_NAME.</value>
        </member>
        <member name="P:Miyagi.Core.GuiManager.SceneManager">
            <summary>
            Gets or sets the Mogre SceneManager.
            </summary>
            <value>The Mogre SceneManager.</value>
        </member>
        <member name="P:Miyagi.Core.GuiManager.ScreenResolutionX">
            <summary>
            Gets or sets the horizontal screen resolution.
            </summary>
            <value>The screen resolution in pixels.</value>
        </member>
        <member name="P:Miyagi.Core.GuiManager.ScreenResolutionY">
            <summary>
            Gets or sets the vertical screen resolution.
            </summary>
            <value>The screen resolution in pixels.</value>
        </member>
        <member name="P:Miyagi.Core.GuiManager.TextSchemes">
            <summary>
            Gets the collection of TextSchemes.
            </summary>
            <value>The collection of TextSchemes.</value>
        </member>
        <member name="P:Miyagi.Core.GuiManager.XmlSerializer">
            <summary>
            Gets the XmlSerializer.
            </summary>
            <value>The XmlSerializer.</value>
        </member>
        <member name="T:Miyagi.Controls.Elements.BorderElement">
            <summary>
            An element for displaying a border.
            </summary>
        </member>
        <member name="M:Miyagi.Controls.Elements.BorderElement.#ctor">
            <summary>
            Initializes a new instance of the BorderElement class.
            </summary>
        </member>
        <member name="M:Miyagi.Controls.Elements.BorderElement.#ctor(System.Xml.XmlNode)">
            <summary>
            Initializes a new instance of the BorderElement class from Xml.
            </summary>
            <param name="node">The XmlNode to read from.</param>
        </member>
        <member name="M:Miyagi.Controls.Elements.BorderElement.Serialize(System.Xml.XmlTextWriter)">
            <summary>
            Serializes the BorderElement to Xml.
            </summary>
            <param name="xtw">The XmlTextWriter.</param>
        </member>
        <member name="M:Miyagi.Controls.Elements.BorderElement.SetSize(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the size of the border.
            </summary>
            <param name="left">The size of the left border.</param>
            <param name="right">The size of the right border.</param>
            <param name="top">The size of the top border.</param>
            <param name="bottom">The size of the bottom border.</param>
        </member>
        <member name="M:Miyagi.Controls.Elements.BorderElement.GetZOrder">
            <summary>
            Gets the ZOrder.
            </summary>
            <returns>An int representing the zorder.</returns>
        </member>
        <member name="M:Miyagi.Controls.Elements.BorderElement.Resize(Mogre.Vector3)">
            <summary>
            Resizes the sprites of the element.
            </summary>
            <param name="diff">The distance to resize.</param>
        </member>
        <member name="M:Miyagi.Controls.Elements.BorderElement.Update">
            <summary>
            Updates the element.
            </summary>
        </member>
        <member name="M:Miyagi.Controls.Elements.BorderElement.GetOwner">
            <summary>
            Gets the owner.
            </summary>
            <returns>An IElementOwner representing the owner of the element.</returns>
        </member>
        <member name="P:Miyagi.Controls.Elements.BorderElement.Size">
            <summary>
            Gets or sets the size of the border.
            </summary>
            <value>The size of the border in pixels.</value>
        </member>
        <member name="P:Miyagi.Controls.Elements.BorderElement.UV">
            <summary>
            Gets or sets the UV-Coordinates used by the BorderElement.
            </summary>
            <value>A DoubleRect representing the UV-coordinates used by the BorderElement. Default is (0.25, 0.25, 0.75, 0.75).</value>
            <remarks>These UV-coordinates represent the inner rectangle of a border texture, which is not used for the actual border.</remarks>
        </member>
        <member name="T:Miyagi.Collections.MeshCollection">
            <summary>
            A custom collection of MeshElements.
            </summary>
        </member>
        <member name="M:Miyagi.Collections.MeshCollection.#ctor(Miyagi.Controls.BaseControl)">
            <summary>
            Initializes a new instance of the MeshCollection class.
            </summary>
            <param name="owner">The parent control of the meshes.</param>
        </member>
        <member name="M:Miyagi.Collections.MeshCollection.Add(Miyagi.Controls.Elements.MeshElement)">
            <summary>
            Adds a MeshElement to the collection.
            </summary>
            <param name="item">The new MeshElement.</param>
        </member>
        <member name="T:Miyagi.Collections.ProtectedCollection`1">
            <summary>
            A protection wrapper for a BaseCollection.
            </summary>
            <typeparam name = "T">The type of items in the collection.</typeparam>
        </member>
        <member name="M:Miyagi.Collections.ProtectedCollection`1.#ctor(Miyagi.Collections.BaseCollection{`0})">
            <summary>
            Initializes a new instance of the ProtectedCollection class.
            </summary>
            <param name="list">The BaseCollection to wrap.</param>
        </member>
        <member name="M:Miyagi.Collections.ProtectedCollection`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns the enumerator of the collection.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:Miyagi.Collections.ProtectedCollection`1.Add(`0)">
            <summary>
            Adds a item to the collection.
            </summary>
            <param name="item">The new item.</param>
        </member>
        <member name="M:Miyagi.Collections.ProtectedCollection`1.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:Miyagi.Collections.ProtectedCollection`1.Contains(`0)">
            <summary>
            Determines whether the collection contains an item.
            </summary>
            <param name="item">The item to find.</param>
            <returns>true if found, otherwise false.</returns>
        </member>
        <member name="M:Miyagi.Collections.ProtectedCollection`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the collection to an array.
            </summary>
            <param name="array">The destination array.</param>
            <param name="arrayIndex">The starting index.</param>
        </member>
        <member name="M:Miyagi.Collections.ProtectedCollection`1.GetEnumerator">
            <summary>
            Returns the enumerator of the collection.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:Miyagi.Collections.ProtectedCollection`1.IndexOf(`0)">
            <summary>
            Returns the index of the specified item.
            </summary>
            <param name="item">The object to locate in the BaseCollection.</param>
            <returns>The zero-based index of the item.</returns>
        </member>
        <member name="M:Miyagi.Collections.ProtectedCollection`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an item at the specified index.
            </summary>
            <param name="index">The index at which item should be inserted.</param>
            <param name="item">The item to insert.</param>
        </member>
        <member name="M:Miyagi.Collections.ProtectedCollection`1.Remove(`0)">
            <summary>
            Removes an item from the collection.
            </summary>
            <param name="item">The item to remove.</param>
            <returns>true if the item has been removed sucessfully, otherwise false.</returns>
        </member>
        <member name="M:Miyagi.Collections.ProtectedCollection`1.RemoveAt(System.Int32)">
            <summary>
            Removes an item at the specific index.
            </summary>
            <param name="index">The index of the item to remove.</param>
        </member>
        <member name="P:Miyagi.Collections.ProtectedCollection`1.Count">
            <summary>
            Gets the number of items in the collection.
            </summary>
            <value>The number of items in the collection.</value>
        </member>
        <member name="P:Miyagi.Collections.ProtectedCollection`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the collection is readonly.
            </summary>
            <value>True if readonly, otherwise false.</value>
        </member>
        <member name="P:Miyagi.Collections.ProtectedCollection`1.Item(System.String)">
            <summary>
            Gets an item by name.
            </summary>
            <param name="name">The name of the item.</param>
        </member>
        <member name="P:Miyagi.Collections.ProtectedCollection`1.Item(System.Int32)">
            <summary>
            Gets an item by index.
            </summary>
            <param name="index">The index of the item.</param>
        </member>
        <member name="T:Miyagi.Core.TextScheme">
            <summary>
            A TextScheme represents a font and different text colours for events.
            </summary>
        </member>
        <member name="M:Miyagi.Core.TextScheme.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the TextScheme class.
            </summary>
            <param name="name">The name of the TextScheme.</param>
            <param name="font">The filename of the font of the TextScheme.</param>
        </member>
        <member name="M:Miyagi.Core.TextScheme.#ctor(System.String,System.String,System.Int32,System.Int32,Mogre.ColourValue)">
            <summary>
            Initializes a new instance of the TextScheme class for a TrueType font.
            </summary>
            <param name="name">The name of the TextScheme.</param>
            <param name="font">The filename of the font of the TextScheme.</param>
            <param name="size">The size of the font.</param>
            <param name="resolution">The resolution of the font.</param>
            <param name="colour">The colour of the TextScheme.</param>
        </member>
        <member name="M:Miyagi.Core.TextScheme.FromFont(System.String,Mogre.Font)">
            <summary>
            Creates a TextScheme from a font.
            </summary>
            <param name="name">The name of the TextScheme.</param>
            <param name="font">The font used to create the TextScheme.</param>
            <returns>The newly created TextScheme.</returns>
        </member>
        <member name="M:Miyagi.Core.TextScheme.CreateFont">
            <summary>
            Creates the font of the TextScheme and sets the CharHeight and SpaceWidth property.
            </summary>
            <returns>The newly created font.</returns>
        </member>
        <member name="M:Miyagi.Core.TextScheme.Serialize(System.Xml.XmlTextWriter)">
            <summary>
            Serializes the TextScheme to Xml.
            </summary>
            <param name="xtw">The XmlTextWriter.</param>
        </member>
        <member name="M:Miyagi.Core.TextScheme.ToString">
            <summary>
            Returns the name of the TextScheme.
            </summary>
            <returns>The name of the TextScheme.</returns>
        </member>
        <member name="P:Miyagi.Core.TextScheme.CharHeight">
            <summary>
            Gets or sets the height of the characters.
            </summary>
            <value>The height of the characters.</value>
        </member>
        <member name="P:Miyagi.Core.TextScheme.Colours">
            <summary>
            Gets the collection of colours.
            </summary>
            <value>The collection of colours.</value>
        </member>
        <member name="P:Miyagi.Core.TextScheme.Font">
            <summary>
            Gets the definition of the font.
            </summary>
            <value>The definition of the font.</value>
        </member>
        <member name="P:Miyagi.Core.TextScheme.Name">
            <summary>
            Gets or sets the name of the TextScheme.
            </summary>
            <value>The name of the TextScheme.</value>
        </member>
        <member name="P:Miyagi.Core.TextScheme.SpaceWidth">
            <summary>
            Gets or sets the width of space.
            </summary>
            <value>The width of space.</value>
        </member>
        <member name="T:Miyagi.Core.TextScheme.ColourDefinition">
            <summary>
            Top and bottom colour of a text.
            </summary>
        </member>
        <member name="M:Miyagi.Core.TextScheme.ColourDefinition.#ctor(Mogre.ColourValue)">
            <summary>
            Initializes a new instance of the ColourDefinition struct.
            </summary>
            <param name="colour">The ColourValue to use for a text.</param>
        </member>
        <member name="M:Miyagi.Core.TextScheme.ColourDefinition.#ctor(Mogre.ColourValue,Mogre.ColourValue)">
            <summary>
            Initializes a new instance of the ColourDefinition struct.
            </summary>
            <param name="topColour">The ColourValue to use for the top of a text.</param>
            <param name="bottomColour">The ColourValue to use for the bottom of a text.</param>
        </member>
        <member name="M:Miyagi.Core.TextScheme.ColourDefinition.op_Inequality(Miyagi.Core.TextScheme.ColourDefinition,Miyagi.Core.TextScheme.ColourDefinition)">
            <summary>
            Returns a value indicating whether two TextColour instances are not equal.
            </summary>
            <param name="left">A TextColour instance.</param>
            <param name="right">Another TextColour instance.</param>
            <returns>True if both are unequal, otherwise false.</returns>
        </member>
        <member name="M:Miyagi.Core.TextScheme.ColourDefinition.op_Equality(Miyagi.Core.TextScheme.ColourDefinition,Miyagi.Core.TextScheme.ColourDefinition)">
            <summary>
            Returns a value indicating whether two TextColour instances are equal.
            </summary>
            <param name="left">A TextColour instance.</param>
            <param name="right">Another TextColour instance.</param>
            <returns>True if both are equal, otherwise false.</returns>
        </member>
        <member name="M:Miyagi.Core.TextScheme.ColourDefinition.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified Object.
            </summary>
            <param name="obj">The other Object.</param>
            <returns>True if both are equal, otherwise false.</returns>
        </member>
        <member name="M:Miyagi.Core.TextScheme.ColourDefinition.Equals(Miyagi.Core.TextScheme.ColourDefinition)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified TextColour.
            </summary>
            <param name="other">The other TextColour.</param>
            <returns>True if both are equal, otherwise false.</returns>
        </member>
        <member name="M:Miyagi.Core.TextScheme.ColourDefinition.GetHashCode">
            <summary>
            Returns the HashCode of the current instance.
            </summary>
            <returns>The HashCode of the TextColour.</returns>
        </member>
        <member name="M:Miyagi.Core.TextScheme.ColourDefinition.Serialize(System.Xml.XmlTextWriter)">
            <summary>
            Serializes the TextScheme.Colour to Xml.
            </summary>
            <param name="xtw">The XmlTextWriter.</param>
        </member>
        <member name="P:Miyagi.Core.TextScheme.ColourDefinition.Bottom">
            <summary>
            Gets the bottom colour.
            </summary>
            <value>The colour of the bottom of the text.</value>
        </member>
        <member name="P:Miyagi.Core.TextScheme.ColourDefinition.Top">
            <summary>
            Gets the top colour.
            </summary>
            <value>The colour of the top of the text.</value>
        </member>
        <member name="T:Miyagi.Core.TextScheme.FontDefinition">
            <summary>
            Definition of a font.
            </summary>
        </member>
        <member name="M:Miyagi.Core.TextScheme.FontDefinition.#ctor(Miyagi.Core.TextScheme)">
            <summary>
            Initializes a new instance of the FontDefinition class.
            </summary>
            <param name="owner">The owner of the FontDefinition.</param>
        </member>
        <member name="P:Miyagi.Core.TextScheme.FontDefinition.FileName">
            <summary>
            Gets or sets the filename of the font.
            </summary>
            <value>The filename of the font.</value>
        </member>
        <member name="P:Miyagi.Core.TextScheme.FontDefinition.GlyphCoordinates">
            <summary>
            Gets a Dictionary of GlyphCoordinates.
            </summary>
            <value>A Dictionary of GlyphCoordinates.</value>
        </member>
        <member name="P:Miyagi.Core.TextScheme.FontDefinition.Name">
            <summary>
            Gets the name of the font.
            </summary>
            <value>The name of the font.</value>
        </member>
        <member name="P:Miyagi.Core.TextScheme.FontDefinition.Resolution">
            <summary>
            Gets or sets the resolution of the font (for TrueType fonts).
            </summary>
            <value>The resolution of the font.</value>
        </member>
        <member name="P:Miyagi.Core.TextScheme.FontDefinition.Size">
            <summary>
            Gets or sets the size of the font (for TrueType fonts).
            </summary>
            <value>The size of the font.</value>
        </member>
        <member name="P:Miyagi.Core.TextScheme.FontDefinition.TextureName">
            <summary>
            Gets the name of the texture of the font.
            </summary>
            <value>A string representing the name of the texture of the font.</value>
        </member>
        <member name="P:Miyagi.Core.TextScheme.FontDefinition.Type">
            <summary>
            Gets or sets the type of the font.
            </summary>
            <value>The type of the font.</value>
        </member>
        <member name="T:Miyagi.Controls.Elements.CaretElement">
            <summary>
            An element for displaying a caret.
            </summary>
        </member>
        <member name="M:Miyagi.Controls.Elements.CaretElement.#ctor">
            <summary>
            Initializes a new instance of the CaretElement class.
            </summary>
        </member>
        <member name="M:Miyagi.Controls.Elements.CaretElement.Serialize(System.Xml.XmlTextWriter)">
            <summary>
            Serializes the CaretElement to Xml.
            </summary>
            <param name="xtw">The XmlTextWriter.</param>
        </member>
        <member name="M:Miyagi.Controls.Elements.CaretElement.ApplyOpacity">
            <summary>
            Applies the opacity.
            </summary>
        </member>
        <member name="M:Miyagi.Controls.Elements.CaretElement.ApplyTextureFiltering">
            <summary>
            Applies the TextureFiltering.
            </summary>
        </member>
        <member name="M:Miyagi.Controls.Elements.CaretElement.GetZOrder">
            <summary>
            Gets the ZOrder.
            </summary>
            <returns>An int representing the zorder.</returns>
        </member>
        <member name="M:Miyagi.Controls.Elements.CaretElement.Update">
            <summary>
            Updates the element.
            </summary>
        </member>
        <member name="M:Miyagi.Controls.Elements.CaretElement.GetOwner">
            <summary>
            Gets the owner.
            </summary>
            <returns>An IElementOwner representing the owner of the element.</returns>
        </member>
        <member name="P:Miyagi.Controls.Elements.CaretElement.BlinkTime">
            <summary>
            Gets or sets the speed that the CaretElement blinks.
            </summary>
            <value>An int representing the speed that the caret blinks in milliseconds. Default is 800.</value>
        </member>
        <member name="P:Miyagi.Controls.Elements.CaretElement.Colour">
            <summary>
            Gets or sets the colour of the CaretElement.
            </summary>
            <value>A ColourValue representing the colour of the caret. Default is ColourValue.White.</value>
        </member>
        <member name="P:Miyagi.Controls.Elements.CaretElement.Size">
            <summary>
            Gets or sets the size of the CaretElement.
            </summary>
            <value>A Size representing the size of the CaretElement.</value>
        </member>
        <member name="T:Miyagi.Controls.Elements.BarElement">
            <summary>
            An element for displaying a bar.
            </summary>
        </member>
        <member name="M:Miyagi.Controls.Elements.BarElement.#ctor">
            <summary>
            Initializes a new instance of the BarElement class.
            </summary>
        </member>
        <member name="M:Miyagi.Controls.Elements.BarElement.Serialize(System.Xml.XmlTextWriter)">
            <summary>
            Serializes the BarElement to Xml.
            </summary>
            <param name="xtw">The XmlTextWriter.</param>
        </member>
        <member name="M:Miyagi.Controls.Elements.BarElement.GetZOrder">
            <summary>
            Gets the ZOrder.
            </summary>
            <returns>An int representing the zorder.</returns>
        </member>
        <member name="M:Miyagi.Controls.Elements.BarElement.Update">
            <summary>
            Updates the element.
            </summary>
        </member>
        <member name="M:Miyagi.Controls.Elements.BarElement.GetOwner">
            <summary>
            Gets the owner.
            </summary>
            <returns>An IElementOwner representing the owner of the element.</returns>
        </member>
        <member name="P:Miyagi.Controls.Elements.BarElement.Offset">
            <summary>
            Gets or sets the offset of the bar.
            </summary>
            <value>The offset of the bar.</value>
        </member>
        <member name="P:Miyagi.Controls.Elements.BarElement.Orientation">
            <summary>
            Gets or sets the orientation of the ProgressBar.
            </summary>
            <value>The orientation.</value>
        </member>
        <member name="P:Miyagi.Controls.Elements.BarElement.TextureMode">
            <summary>
            Gets or sets the TextureMode of the ProgressBar.
            </summary>
            <value>The TextureMode.</value>
        </member>
        <member name="T:Miyagi.Plugin.PluginManager">
            <summary>
            A PluginManager.
            </summary>
        </member>
        <member name="M:Miyagi.Plugin.PluginManager.#ctor(Miyagi.Core.GuiManager)">
            <summary>
            Initializes a new instance of the PluginManager class.
            </summary>
            <param name="guiMgr">The GuiManager.</param>
        </member>
        <member name="M:Miyagi.Plugin.PluginManager.GetScriptingPlugin(System.String)">
            <summary>
            Gets the ScriptingPlugin for the specified file extension.
            </summary>
            <param name="extension">The file extension.</param>
            <returns>The ScriptingPlugin for the specified extension.</returns>
        </member>
        <member name="M:Miyagi.Plugin.PluginManager.LoadPlugin(System.String)">
            <summary>
            Load a plugin.
            </summary>
            <param name="fileName">The filename of the plugin.</param>
            <returns>The loaded plugin.</returns>
        </member>
        <member name="M:Miyagi.Plugin.PluginManager.RegisterScriptingPlugin(Miyagi.Plugin.ScriptingPlugin,System.String)">
            <summary>
            Registers a ScriptingPlugin.
            </summary>
            <param name="plugin">The scripting plugin.</param>
            <param name="extension">The file extension.</param>
        </member>
        <member name="M:Miyagi.Plugin.PluginManager.UnloadAllPlugins">
            <summary>
            Unloads all plugins.
            </summary>
        </member>
        <member name="M:Miyagi.Plugin.PluginManager.UnloadPlugin(System.String)">
            <summary>
            Unloads a plugin.
            </summary>
            <param name="name">The name of the plugin.</param>
        </member>
        <member name="M:Miyagi.Plugin.PluginManager.UnloadPlugin(Miyagi.Plugin.BasePlugin)">
            <summary>
            Unloads a plugin.
            </summary>
            <param name="plugin">The plugin.</param>
        </member>
        <member name="M:Miyagi.Plugin.PluginManager.UnregisterScriptingPlugin(Miyagi.Plugin.ScriptingPlugin,System.String)">
            <summary>
            Unregisters a ScriptingPlugin.
            </summary>
            <param name="plugin">The scripting plugin.</param>
            <param name="extension">The file extension.</param>
        </member>
        <member name="P:Miyagi.Plugin.PluginManager.Plugins">
            <summary>
            Gets the collection of loaded plugins.
            </summary>
            <value>A collection of loaded plugins.</value>
        </member>
        <member name="T:Miyagi.Controls.Elements.MeshElement">
            <summary>
            A 3d overlay mesh.
            </summary>
        </member>
        <member name="M:Miyagi.Controls.Elements.MeshElement.#ctor(System.String,System.String,Miyagi.Core.Size,Miyagi.Core.Position)">
            <summary>
            Initializes a new instance of the MeshElement class.
            </summary>
            <param name="name">The name of the MeshElement.</param>
            <param name="meshFile">The file of the mesh.</param>
            <param name="size">The size of the MeshElement.</param>
            <param name="position">The position of the MeshElement.</param>
        </member>
        <member name="M:Miyagi.Controls.Elements.MeshElement.Dispose">
            <summary>
            Releases the unmanaged resources used by the MeshElement.
            </summary>
        </member>
        <member name="M:Miyagi.Controls.Elements.MeshElement.ResetPositionAndSize">
            <summary>
            Resets the dimensions of the MeshElement.
            </summary>
        </member>
        <member name="M:Miyagi.Controls.Elements.MeshElement.Serialize(System.Xml.XmlTextWriter)">
            <summary>
            Serializes the MeshElement to Xml.
            </summary>
            <param name="xtw">The XmlTextWriter.</param>
        </member>
        <member name="M:Miyagi.Controls.Elements.MeshElement.ToString">
            <summary>
            Return the name of the MeshElement.
            </summary>
            <returns>The name of the MeshElement.</returns>
        </member>
        <member name="M:Miyagi.Controls.Elements.MeshElement.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the MeshElement.
            </summary>
            <param name="disposing">Whether Dispose has been called.</param>
        </member>
        <member name="P:Miyagi.Controls.Elements.MeshElement.IsRotatable">
            <summary>
            Gets a value indicating whether the MeshElement is rotatable.
            </summary>
            <value>If true, the MeshElement is rotatable on the X and Y-axis.</value>
        </member>
        <member name="P:Miyagi.Controls.Elements.MeshElement.MeshFile">
            <summary>
            Gets the name of the mesh file.
            </summary>
            <value>A string representing the name of the mesh file.</value>
        </member>
        <member name="P:Miyagi.Controls.Elements.MeshElement.Name">
            <summary>
            Gets the name of the mesh element.
            </summary>
            <value>A string representing the name of the MeshElement.</value>
        </member>
        <member name="P:Miyagi.Controls.Elements.MeshElement.Opacity">
            <summary>
            Gets or sets the opacity.
            </summary>
            <value>The opacity.</value>
        </member>
        <member name="P:Miyagi.Controls.Elements.MeshElement.Orientation">
            <summary>
            Gets or sets the orientation.
            </summary>
            <value>The orientation.</value>
        </member>
        <member name="P:Miyagi.Controls.Elements.MeshElement.Owner">
            <summary>
            Gets the parent control.
            </summary>
            <value>The parent control.</value>
        </member>
        <member name="P:Miyagi.Controls.Elements.MeshElement.Position">
            <summary>
            Gets or sets the relative position.
            </summary>
            <value>The relative position.</value>
        </member>
        <member name="P:Miyagi.Controls.Elements.MeshElement.Rotation">
            <summary>
            Gets or sets the rotation of the MeshElement.
            </summary>
            <value>The rotation of the MeshElement.</value>
        </member>
        <member name="P:Miyagi.Controls.Elements.MeshElement.RotationMode">
            <summary>
            Gets or sets the RotationMode of the MeshElement.
            </summary>
            <value>A bitwise combination of <see cref="T:Miyagi.Core.RotationModes"/> representing how the MeshElement can be rotated.</value>
        </member>
        <member name="P:Miyagi.Controls.Elements.MeshElement.Size">
            <summary>
            Gets or sets the size of the MeshElement.
            </summary>
            <value>The size in pixels.</value>
        </member>
        <member name="P:Miyagi.Controls.Elements.MeshElement.ZOrder">
            <summary>
            Gets or sets the ZOrder of the MeshElement.
            </summary>
            <value>The ZOrder of the MeshElement.</value>
        </member>
        <member name="P:Miyagi.Controls.Elements.MeshElement.Zoom">
            <summary>
            Gets or sets the zoom of the MeshElement.
            </summary>
            <value>The zoom factor.</value>
        </member>
        <member name="T:Miyagi.Controls.ProgressBar">
            <summary>
            A ProgressBar control.
            </summary>
        </member>
        <member name="M:Miyagi.Controls.ProgressBar.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ProgressBar class.
            </summary>
            <param name="name">The name of the ProgressBar.</param>
        </member>
        <member name="M:Miyagi.Controls.ProgressBar.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the ProgressBar class.
            </summary>
            <param name="name">The name of the ProgressBar.</param>
            <param name="material">The material of the ProgressBar.</param>
        </member>
        <member name="M:Miyagi.Controls.ProgressBar.#ctor(System.String,System.String,Miyagi.Core.Size)">
            <summary>
            Initializes a new instance of the ProgressBar class.
            </summary>
            <param name="name">The name of the ProgressBar.</param>
            <param name="material">The material of the ProgressBar.</param>
            <param name="size">The size of the ProgressBar.</param>
        </member>
        <member name="M:Miyagi.Controls.ProgressBar.#ctor(System.String,System.String,Miyagi.Core.Size,Miyagi.Core.Position)">
            <summary>
            Initializes a new instance of the ProgressBar class.
            </summary>
            <param name="name">The name of the ProgressBar.</param>
            <param name="material">The material of the ProgressBar.</param>
            <param name="size">The size of the ProgressBar.</param>
            <param name="position">The position of the ProgressBar.</param>
        </member>
        <member name="M:Miyagi.Controls.ProgressBar.#ctor(System.Xml.XmlNode)">
            <summary>
            Initializes a new instance of the ProgressBar class from Xml.
            </summary>
            <param name="node">The XmlNode to read from.</param>
        </member>
        <member name="M:Miyagi.Controls.ProgressBar.ResetPositionAndSize">
            <summary>
            Resets the position and size of the control.
            </summary>
        </member>
        <member name="M:Miyagi.Controls.ProgressBar.Update">
            <summary>
            Updates the control.
            </summary>
        </member>
        <member name="M:Miyagi.Controls.ProgressBar.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the control.
            </summary>
            <param name="disposing">Whether Dispose has been called.</param>
        </member>
        <member name="P:Miyagi.Controls.ProgressBar.Bar">
            <summary>
            Gets or sets the bar of the ProgressBar.
            </summary>
            <value>A BarElement representing the bar of the ProgressBar.</value>
        </member>
        <member name="P:Miyagi.Controls.ProgressBar.Max">
            <summary>
            Gets or sets the maximum value of the ProgressBar.
            </summary>
            <value>The maximum value.</value>
            <remarks>Max will be set to Min if it is set to a value smaller than Min.</remarks>
        </member>
        <member name="P:Miyagi.Controls.ProgressBar.Min">
            <summary>
            Gets or sets the minimum value of the ProgressBar.
            </summary>
            <value>The minimum value.</value>
            <remarks>Min will be set to Max if it is set to a value larger than Max.</remarks>
        </member>
        <member name="P:Miyagi.Controls.ProgressBar.Value">
            <summary>
            Gets or sets the value of the ProgressBar.
            </summary>
            <value>The value of the ProgressBar.</value>
            <remarks>Value will be set to Max if the value is larger than Max, and set to Min if the value is smaller than Min.</remarks>
        </member>
        <member name="P:Miyagi.Controls.ProgressBar.UpdateType">
            <summary>
            Gets or sets the UpdateType.
            </summary>
            <value>An UpdateType representing what should be changed when the control is updated.</value>
        </member>
        <member name="P:Miyagi.Controls.ProgressBar.ElementBucket">
            <summary>
            Gets a list of elements.
            </summary>
            <value>A list of elements.</value>
        </member>
        <member name="T:Miyagi.Rendering.SpriteBatch">
            <summary>
            A batch of Sprites.
            </summary>
        </member>
        <member name="M:Miyagi.Rendering.SpriteBatch.#ctor(Miyagi.Controls.BaseControl,System.Int32)">
            <summary>
            Initializes a new instance of the SpriteBatch class.
            </summary>
            <param name="owner">The owner of the SpriteBatch.</param>
            <param name="capacity">The number of Quads the SpriteBatch will contain.</param>
        </member>
        <member name="M:Miyagi.Rendering.SpriteBatch.GetQuad(System.Int32)">
            <summary>
            Gets the Quad at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>The Quad at the specified index.</returns>
        </member>
        <member name="M:Miyagi.Rendering.SpriteBatch.SetQuads(Miyagi.Rendering.Quad[])">
            <summary>
            Sets the Quads.
            </summary>
            <param name="quads">The new Quads.</param>
        </member>
        <member name="P:Miyagi.Rendering.SpriteBatch.QuadCount">
            <summary>
            Gets the number of quads.
            </summary>
            <value>An int representing the number of Quads.</value>
        </member>
        <member name="T:Miyagi.Controls.TextBox">
            <summary>
            A TextBox control.
            </summary>
        </member>
        <member name="M:Miyagi.Controls.TextBox.#ctor(System.String)">
            <summary>
            Initializes a new instance of the TextBox class.
            </summary>
            <param name="name">The name of the TextBox.</param>
        </member>
        <member name="M:Miyagi.Controls.TextBox.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the TextBox class.
            </summary>
            <param name="name">The name of the TextBox.</param>
            <param name="material">The material of the TextBox.</param>
        </member>
        <member name="M:Miyagi.Controls.TextBox.#ctor(System.String,System.String,Miyagi.Core.Size)">
            <summary>
            Initializes a new instance of the TextBox class.
            </summary>
            <param name="name">The name of the TextBox.</param>
            <param name="material">The material of the TextBox.</param>
            <param name="size">The size of the TextBox.</param>
        </member>
        <member name="M:Miyagi.Controls.TextBox.#ctor(System.String,System.String,Miyagi.Core.Size,Miyagi.Core.Position)">
            <summary>
            Initializes a new instance of the TextBox class.
            </summary>
            <param name="name">The name of the TextBox.</param>
            <param name="material">The material of the TextBox.</param>
            <param name="size">The size of the TextBox.</param>
            <param name="position">The position of the TextBox.</param>
        </member>
        <member name="M:Miyagi.Controls.TextBox.#ctor(System.Xml.XmlNode)">
            <summary>
            Initializes a new instance of the TextBox class from Xml.
            </summary>
            <param name="node">The XmlNode to read from.</param>
        </member>
        <member name="M:Miyagi.Controls.TextBox.ResetPositionAndSize">
            <summary>
            Resets the position and size of the control.
            </summary>
        </member>
        <member name="M:Miyagi.Controls.TextBox.OnKeyPressed(Miyagi.Controls.Events.KeyEvent)">
            <summary>
            Handles key presses.
            </summary>
            <param name="arg">The KeyEvent.</param>
        </member>
        <member name="M:Miyagi.Controls.TextBox.OnKeyReleased(Miyagi.Controls.Events.KeyEvent)">
            <summary>
            Handles key releases.
            </summary>
            <param name="arg">The KeyEvent.</param>
        </member>
        <member name="M:Miyagi.Controls.TextBox.Update">
            <summary>
            Updates the control.
            </summary>
        </member>
        <member name="M:Miyagi.Controls.TextBox.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the control.
            </summary>
            <param name="disposing">Whether Dispose has been called.</param>
        </member>
        <member name="M:Miyagi.Controls.TextBox.Input(System.String)">
            <summary>
            Tries to insert a string into the TextBox.
            </summary>
            <param name="s">String to insert.</param>
            <returns>true if success, otherwise false.</returns>
        </member>
        <member name="M:Miyagi.Controls.TextBox.InsertBackspace">
            <summary>
            Tries to delete last character.
            </summary>
            <returns>true if success, otherwise false.</returns>
        </member>
        <member name="M:Miyagi.Controls.TextBox.OnLostFocus">
            <summary>
            Handles losing the focus.
            </summary>
        </member>
        <member name="M:Miyagi.Controls.TextBox.OnSubmit">
            <summary>
            Handles submit.
            </summary>
        </member>
        <member name="E:Miyagi.Controls.TextBox.Submit">
            <summary>
            Occurs when the enter is pressed and the control has the focus.
            </summary>
            <remarks>Submits the text.</remarks>
        </member>
        <member name="P:Miyagi.Controls.TextBox.KeyFlowTime">
            <summary>
            Gets or sets the waiting time for automatically repeating held keys.
            </summary>
            <value>The time in millisecondes. Default is 30.</value>
        </member>
        <member name="P:Miyagi.Controls.TextBox.KeyHeldWaitTime">
            <summary>
            Gets or sets the time to wait until a key is considered hold.
            </summary>
            <value>The time in millisecondes. Default is 300.</value>
        </member>
        <member name="P:Miyagi.Controls.TextBox.AlphaNumericOnly">
            <summary>
            Gets or sets a value indicating whether only alphanumeric characters should be accepted as input by the TextBox.
            </summary>
            <value>If set to true, the TextBox will only accept alphanumeric characters. Default is false.</value>
        </member>
        <member name="P:Miyagi.Controls.TextBox.Caret">
            <summary>
            Gets or sets the caret of the TextBox.
            </summary>
            <value>A CaretElement representing the caret of the TextBox.</value>
        </member>
        <member name="P:Miyagi.Controls.TextBox.ClearTextOnSubmit">
            <summary>
            Gets or sets a value indicating whether the text should be cleared after submit.
            </summary>
            <value>True if the TextBox clears the text after submit. Default is false.</value>
        </member>
        <member name="P:Miyagi.Controls.TextBox.DefocusOnSubmit">
            <summary>
            Gets or sets a value indicating whether the TextBox should lose focus after submit.
            </summary>
            <value>True if the TextBox loses focus after submit. Default is false.</value>
        </member>
        <member name="P:Miyagi.Controls.TextBox.MaxCharacterLimit">
            <summary>
            Gets or sets the maximum amount of characters.
            </summary>
            <value>The maximum amount of characters. 0 is unlimited.</value>
        </member>
        <member name="P:Miyagi.Controls.TextBox.UseCaret">
            <summary>
            Gets or sets a value indicating whether the TextBox should use a caret.
            </summary>
            <value>True if the TextBox uses a caret, otherwise false.</value>
        </member>
        <member name="P:Miyagi.Controls.TextBox.UpdateType">
            <summary>
            Gets or sets the UpdateType.
            </summary>
            <value>An UpdateType representing what should be changed when the control is updated.</value>
        </member>
        <member name="P:Miyagi.Controls.TextBox.ElementBucket">
            <summary>
            Gets a list of elements.
            </summary>
            <value>A list of elements.</value>
        </member>
        <member name="T:Miyagi.Collections.ListBoxItemElementCollection">
            <summary>
            A custom collection of ListBoxItemElementCollection.
            </summary>
        </member>
        <member name="M:Miyagi.Collections.ListBoxItemElementCollection.#ctor(Miyagi.Controls.ListBox)">
            <summary>
            Initializes a new instance of the ListBoxItemElementCollection class.
            </summary>
            <param name="owner">The owner of the ListBoxItemElementCollection.</param>
        </member>
        <member name="M:Miyagi.Collections.ListBoxItemElementCollection.Add(Miyagi.Controls.Elements.ListBoxItemElement)">
            <summary>
            Adds a new item to the collection.
            </summary>
            <param name="item">The new item.</param>
        </member>
        <member name="M:Miyagi.Collections.ListBoxItemElementCollection.AddRange(System.String[])">
            <summary>
            Adds a array of items to the collection.
            </summary>
            <param name="items">The array of items.</param>
        </member>
        <member name="M:Miyagi.Collections.ListBoxItemElementCollection.Dispose">
            <summary>
            Disposes the ListBoxItemElementCollection and its items.
            </summary>
        </member>
        <member name="M:Miyagi.Collections.ListBoxItemElementCollection.Remove(Miyagi.Controls.Elements.ListBoxItemElement)">
            <summary>
            Removes a item from the collection.
            </summary>
            <param name="item">The item to remove.</param>
            <returns>true if the item has been removed sucessfully, otherwise false.</returns>
        </member>
        <member name="M:Miyagi.Collections.ListBoxItemElementCollection.RemoveAt(System.Int32)">
            <summary>
            Removes an item at the specific index.
            </summary>
            <param name="index">The index of the item to remove.</param>
        </member>
        <member name="M:Miyagi.Collections.ListBoxItemElementCollection.Serialize(System.Xml.XmlTextWriter)">
            <summary>
            Serializes the ListBoxItemCollection to Xml.
            </summary>
            <param name="xtw">The XmlTextWriter.</param>
        </member>
        <member name="E:Miyagi.Collections.ListBoxItemElementCollection.ItemAdded">
            <summary>
            Occurs when a new item is added.
            </summary>
        </member>
        <member name="E:Miyagi.Collections.ListBoxItemElementCollection.ItemChanged">
            <summary>
            Occurs when an item is changed.
            </summary>
        </member>
        <member name="E:Miyagi.Collections.ListBoxItemElementCollection.ItemRemoved">
            <summary>
            Occurs when an item is removed.
            </summary>
        </member>
        <member name="P:Miyagi.Collections.ListBoxItemElementCollection.Alignment">
            <summary>
            Gets or sets the alignment of the text of the items.
            </summary>
            <value>The alignment of the text of the items.</value>
        </member>
        <member name="P:Miyagi.Collections.ListBoxItemElementCollection.Offset">
            <summary>
            Gets or sets the offset of the items.
            </summary>
            <value>The offset in pixels.</value>
        </member>
        <member name="P:Miyagi.Collections.ListBoxItemElementCollection.Size">
            <summary>
            Gets or sets the size of the items.
            </summary>
            <value>The size of the items in pixels.</value>
        </member>
        <member name="P:Miyagi.Collections.ListBoxItemElementCollection.TextScheme">
            <summary>
            Gets or sets the TextScheme of the items.
            </summary>
            <value>A TextScheme.</value>
        </member>
        <member name="P:Miyagi.Collections.ListBoxItemElementCollection.TextSchemeName">
            <summary>
            Gets or sets the name of the TextScheme assigned to the items.
            </summary>
            <value>A string representing the name of the TextScheme.</value>
        </member>
        <member name="P:Miyagi.Collections.ListBoxItemElementCollection.Item(System.String)">
            <summary>
            Gets or sets an item by name.
            </summary>
            <param name="name">The name of the item.</param>
        </member>
        <member name="P:Miyagi.Collections.ListBoxItemElementCollection.Item(System.Int32)">
            <summary>
            Gets or sets an item by index.
            </summary>
            <param name="index">The index of the item.</param>
        </member>
        <member name="T:Miyagi.Rendering.RenderManager">
            <summary>
            A RenderManager.
            </summary>
        </member>
        <member name="M:Miyagi.Rendering.RenderManager.#ctor(Miyagi.Core.GuiManager)">
            <summary>
            Initializes a new instance of the RenderManager class.
            </summary>
            <param name="guiMgr">The GuiManager.</param>
        </member>
        <member name="M:Miyagi.Rendering.RenderManager.CreateQuad(Mogre.ColourValue,Mogre.ColourValue,Mogre.Rect,Mogre.FloatRect)">
            <summary>
            Creates a Quad.
            </summary>
            <param name="topColour">The top colour.</param>
            <param name="bottomColour">The bottom colour.</param>
            <param name="rect">A Rect representing the position.</param>
            <param name="uvRect">A FloatRect representing the uv-coordinates.</param>
            <returns>The newly created Quad.</returns>
        </member>
        <member name="M:Miyagi.Rendering.RenderManager.CreateQuad(Mogre.Rect)">
            <summary>
            Creates a Quad.
            </summary>
            <param name="rect">A Rect representing the position.</param>
            <returns>The newly created Quad.</returns>
        </member>
        <member name="M:Miyagi.Rendering.RenderManager.CreateQuadsForBorder(Mogre.Rect,Miyagi.Core.BorderSize,Miyagi.Core.DoubleRect)">
            <summary>
            Creates the Quads for a BorderElement.
            </summary>
            <param name="rect">A Rect representing the position.</param>
            <param name="borderSize">The size of the border.</param>
            <param name="borderUVRect">The uv-coordinates of the border.</param>
            <returns>The newly created Quads.</returns>
        </member>
        <member name="M:Miyagi.Rendering.RenderManager.CreateQuadsForText(Mogre.Rect,System.String,Miyagi.Core.TextScheme,Miyagi.Core.TextScheme.ColourDefinition,Miyagi.Core.TextAlignment,System.Boolean)">
            <summary>
            Creates the Quads for a TextElement.
            </summary>
            <param name="rect">A Rect representing the size and position.</param>
            <param name="text">A string representing the text.</param>
            <param name="textScheme">The TextScheme of the text.</param>
            <param name="colour">The TextScheme Colour.</param>
            <param name="alignment">The alignment of the text.</param>
            <param name="multiline">A value indicating whether the text extents more than one line.</param>
            <returns>The newly created Quads.</returns>
        </member>
        <member name="M:Miyagi.Rendering.RenderManager.CreateRenderer(System.Int32)">
            <summary>
            Creates a Renderer.
            </summary>
            <param name="zorder">The ZOrder of the Renderer.</param>
            <returns>The newly created Renderer.</returns>
        </member>
        <member name="M:Miyagi.Rendering.RenderManager.Dispose">
            <summary>
            Disposes the RenderManager.
            </summary>
        </member>
        <member name="M:Miyagi.Rendering.RenderManager.RemoveRenderer(Miyagi.Rendering.SpriteRenderer)">
            <summary>
            Removes the specified Renderer.
            </summary>
            <param name="r">The Renderer to remove.</param>
        </member>
        <member name="M:Miyagi.Rendering.RenderManager.SortRenderers">
            <summary>
            Sorts the renderers.
            </summary>
        </member>
        <member name="P:Miyagi.Rendering.RenderManager.MainRenderer">
            <summary>
            Gets the main renderer.
            </summary>
            <value>A Renderer representing the main renderer.</value>
        </member>
        <member name="P:Miyagi.Rendering.RenderManager.MinimalHardwareBufferSize">
            <summary>
            Gets or sets the minimal hardware buffer size.
            </summary>
            <value>The minimal hardware buffer size. Default is 240.</value>
        </member>
        <member name="P:Miyagi.Rendering.RenderManager.RenderAfterQueue">
            <summary>
            Gets or sets a value indicating whether the rendering should occur after the specified RenderQueue.
            </summary>
            <value>If the rendering should occur after the specified RenderQueue true, otherwise false (default is false).</value>
        </member>
        <member name="P:Miyagi.Rendering.RenderManager.TargetRenderQueue">
            <summary>
            Gets or sets the RenderQueueID of the RenderQueue in which the rendering should happen (default is RenderQueueGroupID.RENDER_QUEUE_OVERLAY).
            </summary>
            <value>The RenderQueueID of the RenderQueue.</value>
        </member>
        <member name="T:Miyagi.Controls.Events.KeyboardEventArgs">
            <summary>
            EventArgs for keyboard events.
            </summary>
        </member>
        <member name="M:Miyagi.Controls.Events.KeyboardEventArgs.#ctor(Miyagi.Controls.Events.KeyEvent)">
            <summary>
            Initializes a new instance of the KeyboardEventArgs class.
            </summary>
            <param name="e">The KeyEvent.</param>
        </member>
        <member name="P:Miyagi.Controls.Events.KeyboardEventArgs.KeyCode">
            <summary>
            Gets the ConsoleKey.
            </summary>
            <value>The ConsoleKey.</value>
        </member>
        <member name="P:Miyagi.Controls.Events.KeyboardEventArgs.KeyEvent">
            <summary>
            Gets the KeyEvent.
            </summary>
            <value>The KeyEvent.</value>
        </member>
        <member name="T:Miyagi.Core.Position">
            <summary>
            Stores a pair of ints representing a position.
            </summary>
        </member>
        <member name="F:Miyagi.Core.Position.Zero">
            <summary>
            Returns a Position with the coordinates 0, 0.
            </summary>
        </member>
        <member name="M:Miyagi.Core.Position.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the Position struct.
            </summary>
            <param name="x">The x-coordinate.</param>
            <param name="y">The y-coordinate.</param>
        </member>
        <member name="M:Miyagi.Core.Position.op_Inequality(Miyagi.Core.Position,Miyagi.Core.Position)">
            <summary>
            Returns a value indicating whether two Position instances are not equal.
            </summary>
            <param name="left">A Position instance.</param>
            <param name="right">Another Position instance.</param>
            <returns>True if both are unequal, otherwise false.</returns>
        </member>
        <member name="M:Miyagi.Core.Position.op_Addition(Miyagi.Core.Position,Miyagi.Core.Position)">
            <summary>
            Adds the specified Position.
            </summary>
            <param name="left">A Position instance.</param>
            <param name="right">Another Position instance.</param>
            <returns>Left + Right.</returns>
        </member>
        <member name="M:Miyagi.Core.Position.op_Subtraction(Miyagi.Core.Position,Miyagi.Core.Position)">
            <summary>
            Subtracts the specified Position.
            </summary>
            <param name="left">A Position instance.</param>
            <param name="right">Another Position instance.</param>
            <returns>Left - Right.</returns>
        </member>
        <member name="M:Miyagi.Core.Position.op_Equality(Miyagi.Core.Position,Miyagi.Core.Position)">
            <summary>
            Returns a value indicating whether two Position instances are equal.
            </summary>
            <param name="left">A Position instance.</param>
            <param name="right">Another Position instance.</param>
            <returns>True if both are equal, otherwise false.</returns>
        </member>
        <member name="M:Miyagi.Core.Position.Parse(System.String)">
            <summary>
            Converts a string to a Position. 
            </summary>
            <param name="s">The string to convert.</param>
            <returns>A Position representing the string.</returns>
        </member>
        <member name="M:Miyagi.Core.Position.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified Object.
            </summary>
            <param name="obj">The other Object.</param>
            <returns>True if both are equal, otherwise false.</returns>
        </member>
        <member name="M:Miyagi.Core.Position.Equals(Miyagi.Core.Position)">
            <summary>
            Returns a value indicating whether this instance is equal to a specified Position.
            </summary>
            <param name="other">The other Positon.</param>
            <returns>True if both are equal, otherwise false.</returns>
        </member>
        <member name="M:Miyagi.Core.Position.GetHashCode">
            <summary>
            Returns the HashCode of the current instance.
            </summary>
            <returns>The HashCode of the Position.</returns>
        </member>
        <member name="M:Miyagi.Core.Position.Serialize(System.Xml.XmlTextWriter)">
            <summary>
            Serializes the Position to Xml.
            </summary>
            <param name="xtw">The XmlTextWriter.</param>
        </member>
        <member name="M:Miyagi.Core.Position.ToScreenCoordinates">
            <summary>
            Returns a Vector3 representing the Position as screen coordinates [-1;1].
            </summary>
            <returns>A Vector3 representing the Position as screen coordinates.</returns>
        </member>
        <member name="M:Miyagi.Core.Position.ToString">
            <summary>
            Returns a string representation of the Position.
            </summary>
            <returns>A string representation of the Position.</returns>
        </member>
        <member name="P:Miyagi.Core.Position.X">
            <summary>
            Gets the absolute x-coordinate.
            </summary>
            <value>The x-coordinate as a screen coordinate.</value>
        </member>
        <member name="P:Miyagi.Core.Position.Y">
            <summary>
            Gets the absolute y-coordinate.
            </summary>
            <value>The y-coordinate as a screen coordinate.</value>
        </member>
        <member name="T:Miyagi.Core.Gui">
            <summary>
            A GUI represents a composite group of controls.
            </summary>
        </member>
        <member name="M:Miyagi.Core.Gui.#ctor(System.String)">
            <summary>
            Initializes a new instance of the Gui class.
            </summary>
            <param name="name">The name of the Gui.</param>
        </member>
        <member name="M:Miyagi.Core.Gui.CreateControl``1(System.String,Miyagi.Core.Size,Miyagi.Core.Position)">
            <summary>
            Creates a new control and adds it the GUI.
            </summary>
            <param name="name">The name of the control.</param>
            <param name="size">The size of the control.</param>
            <param name="position">The position of the control.</param>
            <returns>The newly created control, or null when trying to create a instance of an abstract control class.</returns>
            <typeparam name="T">The type of the control.</typeparam>
        </member>
        <member name="M:Miyagi.Core.Gui.Dispose">
            <summary>
            Releases the unmanaged resources used by the GUI and disposed all its controls.
            </summary>
        </member>
        <member name="M:Miyagi.Core.Gui.DisposeAllControls">
            <summary>
            Disposes all Controls.
            </summary>
        </member>
        <member name="M:Miyagi.Core.Gui.GetControl(System.String)">
            <summary>
            Gets a control by name.
            </summary>
            <param name="name">The name of the control.</param>
            <returns>If it exists the first control with that name, else null.</returns>
        </member>
        <member name="M:Miyagi.Core.Gui.GetControlEnumerator">
            <summary>
            Exposes an enumerator for a simple iteration over all controls of the GUI.
            </summary>
            <returns>An enumerator for all gui controls.</returns>
        </member>
        <member name="M:Miyagi.Core.Gui.GetTopControl">
            <summary>
            Returns the topmost control of the GUI under the mouse cursor.
            </summary>
            <returns>If there is a control under the cursor the topmost, else null.</returns>
        </member>
        <member name="M:Miyagi.Core.Gui.GetTopControlAt(Miyagi.Core.Position)">
            <summary>
            Returns the topmost control at the specified position.
            </summary>
            <param name="pos">The position where you want to look for a control.</param>
            <returns>If there is a control at the position the topmost, else null.</returns>
        </member>
        <member name="M:Miyagi.Core.Gui.GetTopControlAt(System.Int32,System.Int32)">
            <summary>
            Returns the topmost control at the specified position.
            </summary>
            <param name="x">The x-coordinate of the position where you want to look for a control.</param>
            <param name="y">The y-coordinate of the position where you want to look for a control.</param>
            <returns>If there is a control at the position the topmost, else null.</returns>
        </member>
        <member name="M:Miyagi.Core.Gui.Hide(System.Boolean)">
            <summary>
            Hides all controls of the GUI.
            </summary>
            <param name="fade">Whether the controls should fade-out.</param>
        </member>
        <member name="M:Miyagi.Core.Gui.Hide(System.Boolean,System.Int32)">
            <summary>
            Hides all controls of the GUI.
            </summary>
            <param name="fade">Whether the controls should fade-out.</param>
            <param name="fadeDurationMS">The fade-out duration in ms.</param>
        </member>
        <member name="M:Miyagi.Core.Gui.OnMouseLeave">
            <summary>
            Triggers mouse leave events.
            </summary>
        </member>
        <member name="M:Miyagi.Core.Gui.OnMouseMoved">
            <summary>
            Triggers mouse move events.
            </summary>
        </member>
        <member name="M:Miyagi.Core.Gui.ResetPositionAndSize">
            <summary>
            Resets the position of all controls.
            </summary>
        </member>
        <member name="M:Miyagi.Core.Gui.Serialize(System.Xml.XmlTextWriter)">
            <summary>
            Serializes the GUI to Xml.
            </summary>
            <param name="xtw">The XmlTextWriter.</param>
        </member>
        <member name="M:Miyagi.Core.Gui.Show(System.Boolean)">
            <summary>
            Shows all controls of the GUI.
            </summary>
            <param name="fade">Whether the controls should fade-in.</param>
        </member>
        <member name="M:Miyagi.Core.Gui.Show(System.Boolean,System.Int32)">
            <summary>
            Shows all controls of the GUI.
            </summary>
            <param name="fade">Whether the controls should fade in.</param>
            <param name="fadeDurationMS">The fade-in duration in ms.</param>
        </member>
        <member name="M:Miyagi.Core.Gui.ToString">
            <summary>
            Returns the name of the GUI.
            </summary>
            <returns>The name of the GUI.</returns>
        </member>
        <member name="M:Miyagi.Core.Gui.Update">
            <summary>
            Updates the GUI.
            </summary>
        </member>
        <member name="M:Miyagi.Core.Gui.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the GUI and disposed all its controls.
            </summary>
            <param name="disposing">Whether Dispose has been called.</param>
        </member>
        <member name="M:Miyagi.Core.Gui.OnPopupEvent(System.Boolean)">
            <summary>
            Handles popup events.
            </summary>
            <param name="inRange">Determines whether the mouse position is inside the popup range.</param>
        </member>
        <member name="P:Miyagi.Core.Gui.Controls">
            <summary>
            Gets the collection of controls.
            </summary>
            <value>A collection of the parent controls of the GUI.</value>
        </member>
        <member name="P:Miyagi.Core.Gui.Mode">
            <summary>
            Gets or sets the mode of the GUI.
            </summary>
            <value>The GuiMode for the GUI.</value>
        </member>
        <member name="P:Miyagi.Core.Gui.Name">
            <summary>
            Gets or sets the name of the GUI.
            </summary>
            <value>The name of the GUI. The name shouldn't be changed to an existing one.</value>
        </member>
        <member name="P:Miyagi.Core.Gui.PopupRange">
            <summary>
            Gets or sets the range when the GUI should pop up.
            </summary>
            <value>The range when the GUI should pop up.</value>
            <remarks>This property has only to be set, when the mode of the GUI is set to either XPopup or YPopup.</remarks>
        </member>
        <member name="P:Miyagi.Core.Gui.Visible">
            <summary>
            Gets or sets a value indicating whether the GUI is visible.
            </summary>
            <value>Is false when GUI.Hide has been called, otherwise true.</value>
        </member>
        <member name="P:Miyagi.Core.Gui.ZOrder">
            <summary>
            Gets or sets the ZOrder of the GUI.
            </summary>
            <value>An int representing the ZOrder of the GUI.</value>
        </member>
        <member name="T:Miyagi.Controls.RadioButton">
            <summary>
            A RadioButton control.
            </summary>
        </member>
        <member name="M:Miyagi.Controls.RadioButton.#ctor(System.String)">
            <summary>
            Initializes a new instance of the RadioButton class.
            </summary>
            <param name="name">The name of the RadioButton.</param>
        </member>
        <member name="M:Miyagi.Controls.RadioButton.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the RadioButton class.
            </summary>
            <param name="name">The name of the RadioButton.</param>
            <param name="material">The material of the RadioButton.</param>
        </member>
        <member name="M:Miyagi.Controls.RadioButton.#ctor(System.String,System.String,Miyagi.Core.Size)">
            <summary>
            Initializes a new instance of the RadioButton class.
            </summary>
            <param name="name">The name of the RadioButton.</param>
            <param name="material">The material of the RadioButton.</param>
            <param name="size">The size of the RadioButton.</param>
        </member>
        <member name="M:Miyagi.Controls.RadioButton.#ctor(System.String,System.String,Miyagi.Core.Size,Miyagi.Core.Position)">
            <summary>
            Initializes a new instance of the RadioButton class.
            </summary>
            <param name="name">The name of the RadioButton.</param>
            <param name="material">The material of the RadioButton.</param>
            <param name="size">The size of the RadioButton.</param>
            <param name="position">The position of the RadioButton.</param>
        </member>
        <member name="M:Miyagi.Controls.RadioButton.#ctor(System.Xml.XmlNode)">
            <summary>
            Initializes a new instance of the RadioButton class from Xml.
            </summary>
            <param name="node">The XmlNode to read from.</param>
        </member>
        <member name="M:Miyagi.Controls.RadioButton.OnChecked">
            <summary>
            Is executed when Checked is set to true.
            </summary>
        </member>
        <member name="M:Miyagi.Controls.RadioButton.OnUnchecked">
            <summary>
            Is executed when Checked is set to false.
            </summary>
        </member>
    </members>
</doc>
